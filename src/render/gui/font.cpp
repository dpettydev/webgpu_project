#include "render/gui/font.h"
#include "render/gui/gui_draw.h"
#include "system/file.h"
#include "util/stringv.h"
#include "util/filename.h"
#include "render/dynamic_draw_command_buffer.h"

#define LINE_LEN_EXTRA 1000000

drgFont drgFont::m_DefaultFont;
int drgFont::m_FontHeaderCount = 0;
drgFont::FontHeaderRec drgFont::m_FontHeaderList[DRG_FONT_MAX];

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//						Initialization Functions
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

//! Constructor
drgFont::drgFont()
{
	m_FontHeaderRec = NULL;
	m_FontHeader = NULL;
	CleanUp();
}
//! Destructor
drgFont::~drgFont()
{
	CleanUp();
}

void drgFont::InitDefaultFont()
{
	int i;
	if (m_FontHeaderCount == 0)
	{
		for (i = 0; (i < DRG_FONT_MAX); ++i)
		{
			m_FontHeaderList[i].header = NULL;
			m_FontHeaderList[i].ref_count = 0;
		}
	}

	static unsigned char fnt_default[3792] = {158, 0, 9, 0, 8, 0, 255, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 2, 0, 0, 0, 0, 0, 0, 200, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0, 20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0, 30, 0, 31, 0, 32, 0, 33, 0, 34, 0, 35, 0, 36, 0, 37, 0, 38, 0, 39, 0, 40, 0, 41, 0, 42, 0, 43, 0, 44, 0, 45, 0, 46, 0, 47, 0, 48, 0, 49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 57, 0, 58, 0, 59, 0, 60, 0, 61, 0, 62, 0, 63, 0, 64, 0, 65, 0, 66, 0, 67, 0, 68, 0, 69, 0, 70, 0, 71, 0, 72, 0, 73, 0, 74, 0, 75, 0, 76, 0, 77, 0, 78, 0, 79, 0, 80, 0, 81, 0, 82, 0, 83, 0, 84, 0, 85, 0, 86, 0, 87, 0, 88, 0, 89, 0, 90, 0, 91, 0, 92, 0, 93, 0, 94, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 95, 0, 96, 0, 97, 0, 255, 255, 255, 255, 98, 0, 255, 255, 99, 0, 100, 0, 101, 0, 102, 0, 103, 0, 104, 0, 105, 0, 106, 0, 107, 0, 255, 255, 108, 0, 109, 0, 110, 0, 255, 255, 255, 255, 111, 0, 112, 0, 113, 0, 114, 0, 255, 255, 115, 0, 116, 0, 117, 0, 118, 0, 119, 0, 120, 0, 255, 255, 121, 0, 255, 255, 255, 255, 255, 255, 255, 255, 122, 0, 123, 0, 255, 255, 124, 0, 125, 0, 126, 0, 255, 255, 255, 255, 255, 255, 127, 0, 128, 0, 129, 0, 130, 0, 131, 0, 255, 255, 255, 255, 255, 255, 132, 0, 133, 0, 134, 0, 135, 0, 136, 0, 255, 255, 255, 255, 137, 0, 138, 0, 139, 0, 140, 0, 255, 255, 141, 0, 255, 255, 255, 255, 142, 0, 143, 0, 255, 255, 255, 255, 144, 0, 145, 0, 146, 0, 255, 255, 147, 0, 148, 0, 149, 0, 150, 0, 151, 0, 152, 0, 153, 0, 154, 0, 255, 255, 155, 0, 156, 0, 255, 255, 255, 255, 157, 0, 255, 255, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 9, 0, 0, 0, 0, 0, 0, 255, 33, 0, 0, 0, 3, 0, 0, 0, 13, 0, 255, 255, 9, 0, 12, 0, 3, 0, 0, 255, 34, 0, 5, 0, 11, 0, 0, 0, 5, 0, 255, 255, 9, 0, 12, 0, 2, 0, 0, 255, 35, 0, 13, 0, 22, 0, 0, 0, 11, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 36, 0, 24, 0, 33, 0, 0, 0, 15, 0, 255, 255, 9, 0, 13, 0, 0, 0, 0, 255, 37, 0, 35, 0, 45, 0, 0, 0, 13, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 38, 0, 47, 0, 57, 0, 0, 0, 13, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 39, 0, 59, 0, 62, 0, 0, 0, 5, 0, 255, 255, 9, 0, 12, 0, 3, 0, 0, 255, 40, 0, 64, 0, 70, 0, 0, 0, 17, 0, 255, 255, 9, 0, 13, 0, 2, 0, 0, 255, 41, 0, 72, 0, 77, 0, 0, 0, 17, 0, 255, 255, 9, 0, 13, 0, 2, 0, 0, 255, 42, 0, 79, 0, 86, 0, 0, 0, 8, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 43, 0, 88, 0, 97, 0, 0, 0, 9, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 44, 0, 99, 0, 104, 0, 0, 0, 6, 0, 255, 255, 9, 0, 3, 0, 1, 0, 0, 255, 45, 0, 106, 0, 112, 0, 0, 0, 3, 0, 255, 255, 9, 0, 6, 0, 2, 0, 0, 255, 46, 0, 114, 0, 117, 0, 0, 0, 4, 0, 255, 255, 9, 0, 3, 0, 3, 0, 0, 255, 47, 0, 106, 0, 115, 0, 6, 0, 20, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 48, 0, 79, 0, 88, 0, 12, 0, 24, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 49, 0, 117, 0, 125, 0, 6, 0, 17, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 50, 0, 90, 0, 98, 0, 12, 0, 23, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 51, 0, 5, 0, 13, 0, 14, 0, 26, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 52, 0, 35, 0, 44, 0, 16, 0, 27, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 53, 0, 46, 0, 54, 0, 16, 0, 28, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 54, 0, 15, 0, 23, 0, 18, 0, 30, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 55, 0, 56, 0, 65, 0, 20, 0, 31, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 56, 0, 67, 0, 76, 0, 20, 0, 32, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 57, 0, 100, 0, 109, 0, 22, 0, 33, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 58, 0, 59, 0, 62, 0, 8, 0, 18, 0, 255, 255, 9, 0, 9, 0, 3, 0, 0, 255, 59, 0, 25, 0, 30, 0, 18, 0, 30, 0, 255, 255, 9, 0, 9, 0, 2, 0, 0, 255, 60, 0, 117, 0, 124, 0, 20, 0, 31, 0, 255, 255, 9, 0, 10, 0, 1, 0, 0, 255, 61, 0, 78, 0, 86, 0, 26, 0, 31, 0, 255, 255, 9, 0, 7, 0, 1, 0, 0, 255, 62, 0, 88, 0, 96, 0, 26, 0, 37, 0, 255, 255, 9, 0, 10, 0, 1, 0, 0, 255, 63, 0, 0, 0, 6, 0, 28, 0, 41, 0, 255, 255, 9, 0, 12, 0, 2, 0, 0, 255, 64, 0, 32, 0, 42, 0, 30, 0, 46, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 65, 0, 44, 0, 54, 0, 30, 0, 41, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 66, 0, 8, 0, 16, 0, 32, 0, 43, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 67, 0, 18, 0, 27, 0, 32, 0, 44, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 68, 0, 56, 0, 65, 0, 34, 0, 45, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 69, 0, 67, 0, 74, 0, 34, 0, 45, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 70, 0, 76, 0, 83, 0, 34, 0, 45, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 71, 0, 111, 0, 120, 0, 34, 0, 46, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 72, 0, 98, 0, 107, 0, 36, 0, 47, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 73, 0, 85, 0, 92, 0, 40, 0, 51, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 74, 0, 44, 0, 51, 0, 44, 0, 56, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 75, 0, 0, 0, 8, 0, 46, 0, 57, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 76, 0, 10, 0, 18, 0, 46, 0, 57, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 77, 0, 20, 0, 29, 0, 46, 0, 57, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 78, 0, 31, 0, 40, 0, 48, 0, 59, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 79, 0, 53, 0, 62, 0, 48, 0, 60, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 80, 0, 64, 0, 72, 0, 48, 0, 59, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 81, 0, 109, 0, 119, 0, 48, 0, 62, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 82, 0, 74, 0, 82, 0, 48, 0, 59, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 83, 0, 94, 0, 103, 0, 50, 0, 62, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 84, 0, 42, 0, 51, 0, 58, 0, 69, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 85, 0, 0, 0, 9, 0, 60, 0, 72, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 86, 0, 11, 0, 21, 0, 60, 0, 71, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 87, 0, 23, 0, 32, 0, 62, 0, 73, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 88, 0, 53, 0, 63, 0, 62, 0, 73, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 89, 0, 65, 0, 75, 0, 62, 0, 73, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 90, 0, 77, 0, 86, 0, 62, 0, 73, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 91, 0, 34, 0, 39, 0, 62, 0, 79, 0, 255, 255, 9, 0, 13, 0, 2, 0, 0, 255, 92, 0, 88, 0, 96, 0, 64, 0, 78, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 93, 0, 98, 0, 103, 0, 64, 0, 81, 0, 255, 255, 9, 0, 13, 0, 2, 0, 0, 255, 94, 0, 84, 0, 92, 0, 54, 0, 60, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 95, 0, 105, 0, 115, 0, 64, 0, 66, 0, 255, 255, 9, 0, 254, 255, 0, 0, 0, 255, 96, 0, 119, 0, 125, 0, 0, 0, 4, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 97, 0, 117, 0, 124, 0, 64, 0, 74, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 98, 0, 105, 0, 113, 0, 68, 0, 81, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 99, 0, 41, 0, 48, 0, 72, 0, 82, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 100, 0, 0, 0, 8, 0, 74, 0, 87, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 101, 0, 10, 0, 19, 0, 74, 0, 84, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 102, 0, 21, 0, 30, 0, 76, 0, 88, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 103, 0, 50, 0, 59, 0, 76, 0, 89, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 104, 0, 61, 0, 69, 0, 76, 0, 88, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 105, 0, 71, 0, 79, 0, 76, 0, 88, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 106, 0, 115, 0, 122, 0, 76, 0, 92, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 107, 0, 81, 0, 89, 0, 80, 0, 92, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 108, 0, 32, 0, 40, 0, 84, 0, 96, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 109, 0, 91, 0, 100, 0, 84, 0, 93, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 110, 0, 102, 0, 110, 0, 84, 0, 93, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 111, 0, 10, 0, 19, 0, 86, 0, 96, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 112, 0, 0, 0, 8, 0, 90, 0, 103, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 113, 0, 21, 0, 29, 0, 90, 0, 103, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 114, 0, 61, 0, 69, 0, 90, 0, 99, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 115, 0, 71, 0, 78, 0, 90, 0, 100, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 116, 0, 42, 0, 51, 0, 92, 0, 104, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 117, 0, 80, 0, 88, 0, 94, 0, 104, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 118, 0, 112, 0, 121, 0, 94, 0, 103, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 119, 0, 90, 0, 100, 0, 96, 0, 105, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 120, 0, 10, 0, 19, 0, 98, 0, 107, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 121, 0, 31, 0, 40, 0, 98, 0, 111, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 122, 0, 102, 0, 110, 0, 96, 0, 105, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 123, 0, 53, 0, 60, 0, 102, 0, 119, 0, 255, 255, 9, 0, 13, 0, 1, 0, 0, 255, 124, 0, 122, 0, 124, 0, 34, 0, 52, 0, 255, 255, 9, 0, 14, 0, 4, 0, 0, 255, 125, 0, 62, 0, 70, 0, 102, 0, 119, 0, 255, 255, 9, 0, 13, 0, 1, 0, 0, 255, 126, 0, 42, 0, 51, 0, 106, 0, 111, 0, 255, 255, 9, 0, 7, 0, 0, 0, 0, 255, 161, 0, 72, 0, 75, 0, 102, 0, 115, 0, 255, 255, 9, 0, 9, 0, 3, 0, 0, 255, 162, 0, 0, 0, 7, 0, 106, 0, 122, 0, 255, 255, 9, 0, 13, 0, 1, 0, 0, 255, 163, 0, 77, 0, 86, 0, 106, 0, 117, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 166, 0, 123, 0, 125, 0, 94, 0, 112, 0, 255, 255, 9, 0, 14, 0, 4, 0, 0, 255, 168, 0, 21, 0, 29, 0, 106, 0, 110, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 169, 0, 88, 0, 98, 0, 108, 0, 120, 0, 255, 255, 9, 0, 11, 0, 0, 0, 0, 255, 170, 0, 112, 0, 119, 0, 106, 0, 115, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 171, 0, 100, 0, 108, 0, 108, 0, 115, 0, 255, 255, 9, 0, 8, 0, 1, 0, 0, 255, 172, 0, 9, 0, 18, 0, 110, 0, 115, 0, 255, 255, 9, 0, 6, 0, 0, 0, 0, 255, 173, 0, 5, 0, 11, 0, 8, 0, 11, 0, 255, 255, 9, 0, 6, 0, 2, 0, 0, 255, 174, 0, 20, 0, 29, 0, 112, 0, 120, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 175, 0, 31, 0, 38, 0, 114, 0, 118, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 176, 0, 40, 0, 47, 0, 114, 0, 120, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 178, 0, 53, 0, 59, 0, 92, 0, 99, 0, 255, 255, 9, 0, 12, 0, 2, 0, 0, 255, 179, 0, 9, 0, 15, 0, 118, 0, 125, 0, 255, 255, 9, 0, 12, 0, 2, 0, 0, 255, 180, 0, 100, 0, 108, 0, 118, 0, 122, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 183, 0, 100, 0, 104, 0, 8, 0, 12, 0, 255, 255, 9, 0, 7, 0, 3, 0, 0, 255, 184, 0, 100, 0, 103, 0, 14, 0, 17, 0, 255, 255, 9, 0, 0, 0, 3, 0, 0, 255, 185, 0, 110, 0, 117, 0, 118, 0, 125, 0, 255, 255, 9, 0, 12, 0, 1, 0, 0, 255, 186, 0, 31, 0, 38, 0, 120, 0, 129, 0, 255, 255, 9, 0, 11, 0, 1, 0, 0, 255, 188, 0, 72, 0, 82, 0, 120, 0, 132, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 189, 0, 17, 0, 27, 0, 122, 0, 134, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 190, 0, 40, 0, 50, 0, 122, 0, 134, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 191, 0, 119, 0, 125, 0, 118, 0, 131, 0, 255, 255, 9, 0, 9, 0, 1, 0, 0, 255, 192, 0, 52, 0, 62, 0, 122, 0, 136, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 193, 0, 84, 0, 94, 0, 122, 0, 136, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 195, 0, 96, 0, 106, 0, 124, 0, 138, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 200, 0, 0, 0, 8, 0, 128, 0, 142, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 201, 0, 108, 0, 116, 0, 128, 0, 142, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 203, 0, 29, 0, 37, 0, 132, 0, 146, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 204, 0, 64, 0, 72, 0, 134, 0, 148, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 205, 0, 74, 0, 82, 0, 134, 0, 148, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 209, 0, 10, 0, 19, 0, 136, 0, 150, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 210, 0, 39, 0, 48, 0, 136, 0, 151, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 211, 0, 50, 0, 59, 0, 138, 0, 153, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 212, 0, 84, 0, 93, 0, 138, 0, 153, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 213, 0, 95, 0, 104, 0, 140, 0, 155, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 217, 0, 106, 0, 115, 0, 144, 0, 159, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 218, 0, 21, 0, 30, 0, 148, 0, 163, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 219, 0, 61, 0, 70, 0, 150, 0, 165, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 220, 0, 72, 0, 81, 0, 150, 0, 165, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 221, 0, 0, 0, 10, 0, 152, 0, 166, 0, 255, 255, 9, 0, 14, 0, 0, 0, 0, 255, 224, 0, 117, 0, 125, 0, 144, 0, 157, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 225, 0, 32, 0, 40, 0, 154, 0, 167, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 226, 0, 42, 0, 50, 0, 156, 0, 169, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 227, 0, 83, 0, 91, 0, 156, 0, 169, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 229, 0, 93, 0, 101, 0, 158, 0, 172, 0, 255, 255, 9, 0, 13, 0, 0, 0, 0, 255, 232, 0, 103, 0, 112, 0, 162, 0, 175, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 233, 0, 114, 0, 123, 0, 162, 0, 175, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 236, 0, 12, 0, 21, 0, 166, 0, 178, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 237, 0, 0, 0, 9, 0, 168, 0, 180, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 238, 0, 52, 0, 61, 0, 168, 0, 180, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 240, 0, 63, 0, 72, 0, 168, 0, 181, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 241, 0, 23, 0, 32, 0, 170, 0, 182, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 242, 0, 34, 0, 43, 0, 172, 0, 185, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 243, 0, 74, 0, 83, 0, 172, 0, 185, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 244, 0, 85, 0, 94, 0, 174, 0, 187, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 245, 0, 96, 0, 105, 0, 178, 0, 191, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 246, 0, 107, 0, 116, 0, 178, 0, 191, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 247, 0, 11, 0, 20, 0, 180, 0, 189, 0, 255, 255, 9, 0, 9, 0, 0, 0, 0, 255, 249, 0, 0, 0, 9, 0, 182, 0, 195, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 250, 0, 45, 0, 54, 0, 182, 0, 195, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 253, 0, 22, 0, 31, 0, 184, 0, 200, 0, 255, 255, 9, 0, 12, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0};
	m_DefaultFont.m_FontHeader = (FontHeader *)fnt_default;
	m_DefaultFont.LoadInternal(0, 3792, "default");

	unsigned char tex_fnt_default[16467] = {137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 128, 0, 0, 1, 0, 8, 6, 0, 0, 0, 123, 249, 126, 167, 0, 0, 32, 0, 73, 68, 65, 84, 120, 156, 237, 125, 119, 184, 22, 197, 217, 254, 125, 14, 135, 38, 32, 69, 44, 168, 52, 65, 69, 17, 149, 72, 132, 88, 16, 19, 27, 118, 99, 143, 13, 141, 177, 151, 160, 216, 208, 136, 154, 136, 93, 163, 31, 177, 160, 145, 196, 18, 177, 163, 241, 51, 177, 43, 26, 81, 163, 98, 87, 98, 239, 81, 17, 44, 40, 69, 224, 254, 253, 113, 207, 184, 179, 243, 206, 182, 183, 28, 248, 126, 231, 125, 174, 235, 185, 206, 121, 103, 103, 119, 103, 119, 159, 121, 230, 233, 3, 146, 107, 146, 124, 144, 228, 129, 36, 97, 240, 207, 36, 239, 54, 255, 143, 54, 199, 251, 58, 199, 45, 174, 76, 242, 13, 146, 221, 205, 239, 201, 222, 117, 66, 216, 129, 228, 97, 36, 219, 7, 142, 53, 145, 60, 155, 228, 191, 73, 94, 77, 114, 89, 231, 216, 174, 36, 111, 37, 217, 38, 112, 222, 50, 36, 247, 38, 121, 44, 201, 141, 83, 238, 189, 174, 121, 150, 209, 41, 125, 250, 120, 191, 59, 145, 236, 154, 241, 76, 246, 217, 215, 201, 232, 211, 134, 228, 31, 72, 110, 144, 209, 111, 93, 243, 13, 134, 57, 109, 107, 147, 28, 226, 97, 59, 231, 120, 63, 146, 23, 147, 220, 212, 187, 86, 47, 146, 183, 145, 156, 20, 122, 231, 32, 185, 30, 5, 167, 59, 7, 158, 38, 249, 137, 249, 255, 34, 115, 220, 127, 49, 48, 3, 92, 72, 178, 149, 249, 253, 30, 201, 95, 101, 60, 220, 16, 146, 63, 80, 31, 219, 63, 118, 24, 201, 183, 73, 110, 65, 114, 58, 69, 12, 32, 185, 60, 201, 153, 12, 19, 87, 87, 115, 206, 23, 36, 159, 53, 99, 253, 93, 194, 189, 55, 48, 199, 47, 76, 56, 62, 142, 228, 231, 222, 139, 186, 134, 228, 147, 20, 145, 249, 253, 87, 112, 222, 203, 107, 36, 7, 145, 108, 75, 242, 39, 9, 215, 239, 104, 238, 127, 112, 198, 59, 186, 196, 244, 123, 213, 105, 123, 129, 165, 48, 192, 57, 126, 183, 105, 251, 52, 112, 189, 213, 72, 62, 71, 242, 126, 239, 217, 208, 8, 96, 62, 4, 246, 47, 0, 124, 109, 16, 129, 191, 0, 208, 6, 192, 170, 0, 6, 2, 152, 5, 160, 135, 249, 189, 18, 128, 31, 0, 172, 130, 82, 216, 12, 192, 245, 0, 110, 52, 191, 239, 2, 176, 187, 215, 103, 83, 0, 119, 3, 120, 16, 192, 20, 0, 235, 155, 246, 255, 1, 240, 60, 128, 73, 129, 235, 254, 26, 64, 47, 0, 235, 1, 24, 2, 224, 42, 0, 199, 5, 250, 37, 61, 139, 133, 189, 0, 156, 14, 224, 8, 0, 115, 157, 246, 51, 0, 244, 6, 240, 183, 192, 57, 91, 2, 120, 22, 192, 225, 208, 123, 88, 13, 192, 115, 0, 206, 74, 184, 127, 94, 152, 8, 189, 199, 222, 78, 219, 206, 0, 214, 242, 240, 29, 231, 248, 179, 222, 95, 23, 222, 1, 176, 17, 128, 139, 0, 116, 119, 15, 52, 1, 152, 103, 254, 119, 9, 224, 43, 0, 157, 157, 255, 137, 248, 75, 91, 31, 192, 84, 0, 173, 0, 52, 2, 120, 11, 64, 3, 68, 24, 215, 3, 88, 8, 160, 163, 211, 255, 0, 232, 227, 221, 1, 224, 125, 0, 139, 0, 188, 10, 160, 171, 55, 208, 47, 0, 172, 99, 198, 53, 4, 192, 187, 0, 118, 4, 176, 157, 105, 15, 193, 242, 208, 203, 250, 175, 249, 61, 7, 241, 15, 232, 194, 55, 206, 51, 185, 176, 18, 128, 43, 32, 66, 187, 205, 59, 246, 17, 128, 95, 1, 120, 20, 192, 222, 0, 110, 114, 142, 221, 8, 189, 135, 243, 1, 252, 12, 192, 121, 16, 241, 221, 235, 244, 233, 0, 160, 167, 249, 127, 25, 231, 126, 3, 156, 49, 125, 226, 221, 243, 13, 0, 179, 1, 252, 199, 105, 123, 47, 225, 153, 44, 156, 5, 224, 26, 68, 239, 193, 135, 249, 0, 238, 43, 105, 37, 217, 195, 176, 142, 195, 29, 214, 208, 131, 90, 59, 64, 178, 51, 201, 53, 18, 88, 213, 120, 70, 178, 194, 32, 115, 157, 16, 171, 124, 159, 90, 191, 65, 114, 162, 193, 208, 245, 250, 146, 124, 139, 90, 34, 94, 163, 214, 212, 143, 73, 30, 149, 194, 46, 71, 154, 251, 254, 134, 228, 78, 36, 191, 39, 121, 114, 66, 223, 70, 195, 54, 59, 123, 237, 255, 67, 177, 126, 191, 221, 197, 201, 212, 178, 232, 46, 93, 221, 72, 254, 158, 228, 235, 36, 63, 34, 249, 12, 201, 219, 25, 95, 227, 183, 103, 58, 76, 246, 198, 183, 55, 201, 123, 204, 115, 252, 44, 101, 60, 85, 65, 187, 134, 146, 228, 65, 101, 92, 224, 47, 36, 175, 50, 255, 111, 69, 242, 235, 132, 126, 179, 41, 225, 171, 129, 228, 67, 36, 79, 74, 185, 102, 3, 35, 161, 242, 106, 146, 143, 155, 182, 180, 113, 60, 68, 17, 205, 28, 146, 71, 23, 124, 134, 246, 36, 191, 161, 100, 157, 180, 126, 27, 155, 247, 180, 157, 211, 246, 107, 146, 215, 146, 236, 66, 173, 177, 171, 147, 60, 210, 251, 168, 237, 72, 174, 106, 112, 13, 115, 141, 19, 156, 182, 110, 78, 223, 54, 230, 58, 215, 144, 92, 171, 210, 143, 155, 7, 65, 205, 88, 146, 220, 167, 192, 137, 221, 41, 225, 231, 49, 146, 151, 153, 255, 71, 147, 124, 215, 252, 239, 75, 205, 99, 204, 61, 166, 81, 194, 218, 110, 57, 238, 241, 115, 106, 22, 36, 113, 31, 139, 251, 146, 156, 71, 242, 91, 74, 24, 180, 247, 190, 158, 228, 14, 57, 238, 179, 133, 25, 91, 154, 246, 96, 9, 243, 83, 138, 40, 67, 199, 223, 33, 249, 211, 140, 107, 228, 21, 2, 139, 224, 254, 36, 111, 72, 24, 239, 238, 36, 95, 52, 239, 61, 145, 0, 26, 205, 160, 242, 124, 20, 139, 215, 80, 179, 109, 177, 121, 249, 115, 72, 46, 160, 52, 130, 57, 140, 164, 119, 23, 119, 162, 212, 59, 82, 108, 253, 4, 134, 85, 58, 75, 148, 111, 83, 156, 98, 79, 146, 79, 144, 252, 7, 165, 30, 185, 253, 250, 83, 51, 127, 28, 37, 121, 127, 79, 242, 62, 231, 69, 239, 159, 227, 89, 14, 53, 125, 151, 203, 209, 247, 17, 138, 219, 132, 142, 109, 195, 136, 115, 53, 23, 1, 52, 80, 75, 230, 89, 94, 251, 22, 20, 39, 89, 72, 77, 140, 183, 146, 174, 97, 255, 121, 129, 228, 230, 206, 129, 44, 157, 211, 226, 108, 70, 179, 236, 10, 146, 55, 102, 12, 216, 178, 192, 27, 72, 46, 50, 31, 171, 85, 160, 223, 197, 148, 74, 55, 128, 34, 176, 189, 40, 185, 225, 69, 175, 223, 104, 138, 8, 173, 220, 177, 175, 185, 254, 67, 230, 239, 96, 175, 255, 50, 36, 143, 96, 92, 125, 250, 157, 25, 75, 214, 50, 3, 146, 55, 145, 124, 165, 130, 15, 214, 134, 228, 25, 76, 86, 19, 45, 182, 205, 121, 189, 109, 169, 9, 176, 178, 215, 62, 137, 228, 157, 230, 57, 31, 101, 14, 2, 104, 244, 14, 100, 233, 156, 160, 214, 78, 50, 18, 120, 238, 34, 121, 65, 198, 128, 183, 166, 244, 121, 144, 60, 198, 156, 63, 194, 235, 51, 148, 228, 92, 106, 182, 239, 71, 9, 88, 160, 136, 112, 49, 227, 4, 99, 151, 150, 21, 157, 54, 171, 67, 135, 62, 212, 153, 230, 216, 127, 156, 182, 163, 76, 91, 183, 64, 127, 31, 255, 73, 114, 106, 142, 126, 149, 224, 126, 212, 204, 189, 59, 71, 223, 123, 73, 222, 18, 104, 111, 237, 252, 159, 74, 0, 141, 0, 54, 1, 240, 29, 164, 239, 90, 200, 210, 57, 1, 96, 101, 243, 247, 19, 231, 183, 175, 206, 248, 208, 23, 82, 237, 0, 224, 99, 243, 183, 209, 57, 222, 6, 192, 159, 1, 92, 0, 224, 37, 72, 45, 92, 5, 210, 93, 127, 6, 224, 109, 72, 133, 180, 112, 63, 164, 114, 94, 7, 96, 67, 0, 195, 32, 21, 203, 222, 107, 61, 239, 254, 211, 77, 255, 167, 157, 182, 247, 204, 223, 254, 25, 99, 7, 164, 231, 191, 155, 217, 171, 50, 216, 10, 82, 175, 183, 66, 252, 221, 248, 208, 15, 192, 54, 0, 38, 4, 142, 253, 144, 251, 110, 148, 26, 181, 152, 228, 132, 26, 81, 244, 178, 148, 166, 112, 40, 165, 10, 62, 67, 242, 68, 74, 160, 122, 210, 163, 214, 51, 41, 235, 151, 149, 13, 90, 81, 156, 229, 7, 146, 179, 40, 77, 195, 191, 254, 30, 148, 154, 73, 243, 28, 143, 83, 172, 241, 67, 74, 48, 243, 103, 118, 107, 239, 119, 39, 74, 118, 56, 39, 227, 57, 6, 152, 123, 236, 91, 163, 247, 100, 177, 31, 165, 93, 237, 145, 209, 239, 98, 150, 46, 137, 33, 76, 229, 0, 246, 159, 21, 89, 186, 12, 84, 11, 59, 146, 124, 152, 250, 224, 86, 104, 124, 137, 250, 216, 105, 122, 183, 255, 145, 178, 198, 215, 217, 220, 171, 156, 49, 222, 64, 233, 241, 33, 27, 134, 197, 139, 168, 229, 43, 212, 103, 115, 74, 210, 158, 107, 158, 243, 98, 150, 202, 76, 109, 41, 121, 227, 45, 211, 239, 85, 146, 163, 202, 28, 239, 50, 148, 252, 117, 72, 181, 8, 160, 185, 112, 58, 101, 176, 105, 238, 251, 102, 97, 95, 138, 11, 252, 62, 225, 248, 154, 148, 150, 115, 108, 224, 216, 80, 146, 243, 41, 221, 127, 43, 138, 187, 205, 163, 102, 177, 219, 111, 28, 201, 47, 73, 30, 71, 105, 92, 183, 83, 176, 83, 25, 227, 61, 132, 34, 128, 52, 130, 173, 136, 0, 134, 82, 42, 219, 28, 74, 141, 152, 78, 9, 39, 149, 190, 232, 79, 89, 42, 244, 53, 39, 182, 166, 88, 235, 170, 129, 99, 199, 155, 143, 252, 11, 175, 189, 19, 37, 20, 79, 101, 152, 11, 61, 72, 57, 207, 92, 45, 226, 20, 138, 219, 185, 30, 212, 101, 24, 89, 87, 237, 88, 62, 39, 121, 179, 119, 189, 6, 243, 113, 143, 75, 121, 142, 23, 41, 46, 147, 231, 153, 83, 9, 160, 41, 65, 52, 104, 128, 108, 226, 175, 153, 223, 251, 67, 130, 214, 44, 0, 255, 155, 91, 192, 40, 133, 30, 21, 156, 91, 13, 56, 1, 192, 217, 144, 31, 194, 247, 45, 92, 4, 96, 117, 200, 214, 223, 27, 145, 63, 225, 34, 200, 175, 177, 53, 128, 197, 222, 57, 157, 0, 108, 14, 224, 24, 200, 95, 2, 200, 246, 63, 16, 122, 135, 91, 66, 142, 29, 0, 248, 30, 192, 7, 206, 185, 63, 64, 66, 115, 23, 239, 154, 107, 153, 182, 123, 18, 158, 97, 56, 128, 65, 0, 126, 153, 112, 28, 0, 214, 5, 176, 182, 249, 127, 5, 51, 254, 189, 204, 239, 71, 225, 250, 11, 114, 82, 81, 43, 202, 92, 250, 167, 102, 158, 177, 195, 169, 120, 131, 55, 204, 76, 116, 143, 109, 229, 28, 115, 49, 196, 166, 45, 238, 71, 193, 61, 9, 199, 27, 73, 110, 232, 181, 245, 52, 24, 234, 111, 221, 203, 195, 205, 239, 65, 140, 252, 2, 115, 152, 236, 118, 6, 229, 226, 158, 75, 201, 66, 110, 251, 234, 76, 55, 103, 223, 66, 169, 127, 105, 239, 237, 92, 38, 195, 54, 110, 223, 36, 14, 224, 67, 27, 0, 173, 1, 124, 154, 179, 127, 53, 160, 29, 128, 171, 33, 111, 95, 87, 72, 53, 114, 97, 89, 0, 107, 2, 56, 26, 82, 237, 44, 60, 151, 114, 205, 235, 33, 87, 243, 231, 9, 199, 23, 3, 120, 198, 107, 251, 48, 229, 122, 157, 204, 223, 111, 1, 28, 10, 224, 143, 0, 30, 134, 188, 159, 211, 16, 247, 136, 186, 208, 0, 113, 134, 175, 33, 15, 164, 11, 111, 26, 12, 193, 202, 0, 118, 1, 176, 83, 202, 152, 0, 224, 100, 131, 217, 144, 66, 69, 157, 73, 174, 79, 114, 75, 202, 0, 242, 2, 147, 35, 99, 86, 51, 84, 55, 149, 146, 110, 67, 142, 149, 144, 21, 46, 13, 207, 49, 51, 233, 84, 67, 185, 93, 188, 227, 187, 153, 246, 144, 133, 178, 185, 112, 152, 25, 195, 51, 148, 252, 48, 134, 145, 44, 240, 33, 147, 215, 233, 75, 168, 217, 63, 188, 224, 253, 206, 162, 214, 243, 60, 86, 203, 92, 152, 198, 1, 54, 7, 112, 167, 249, 127, 49, 128, 11, 17, 54, 48, 252, 10, 192, 95, 1, 188, 12, 5, 121, 124, 129, 184, 31, 219, 194, 73, 80, 192, 197, 155, 0, 214, 200, 160, 203, 245, 1, 140, 129, 168, 189, 79, 70, 223, 37, 9, 118, 77, 95, 1, 10, 102, 177, 6, 166, 142, 208, 108, 125, 59, 112, 206, 69, 80, 0, 201, 46, 80, 44, 65, 17, 24, 4, 96, 60, 34, 121, 163, 114, 200, 65, 37, 93, 73, 238, 72, 73, 240, 143, 120, 199, 250, 81, 70, 154, 51, 114, 80, 229, 206, 166, 239, 245, 25, 253, 90, 81, 142, 12, 235, 87, 176, 166, 218, 36, 14, 112, 9, 165, 98, 237, 199, 176, 93, 161, 13, 195, 178, 130, 69, 95, 234, 7, 21, 122, 54, 157, 90, 199, 63, 161, 84, 188, 80, 76, 36, 40, 179, 242, 3, 94, 219, 254, 102, 108, 190, 39, 243, 18, 74, 221, 220, 186, 90, 51, 184, 0, 134, 98, 48, 115, 201, 0, 179, 161, 48, 173, 222, 0, 46, 131, 76, 173, 86, 138, 60, 26, 154, 209, 103, 230, 160, 202, 41, 80, 68, 76, 150, 153, 242, 120, 40, 188, 108, 171, 140, 126, 159, 66, 26, 201, 234, 0, 186, 1, 24, 12, 224, 114, 40, 122, 200, 157, 89, 139, 1, 76, 14, 156, 191, 6, 20, 225, 179, 200, 107, 31, 5, 201, 30, 99, 1, 60, 9, 105, 46, 227, 1, 252, 29, 225, 168, 164, 243, 77, 255, 63, 64, 81, 79, 3, 1, 92, 12, 133, 144, 185, 156, 240, 92, 0, 191, 133, 180, 169, 30, 230, 62, 22, 158, 128, 162, 170, 106, 5, 63, 133, 184, 249, 49, 80, 84, 86, 4, 5, 40, 232, 247, 212, 58, 231, 90, 219, 166, 155, 25, 253, 27, 202, 220, 59, 153, 210, 167, 243, 122, 179, 124, 236, 111, 102, 136, 107, 6, 77, 226, 0, 62, 118, 167, 28, 64, 159, 48, 223, 26, 121, 43, 201, 151, 3, 125, 67, 14, 159, 67, 204, 24, 146, 92, 198, 167, 81, 220, 130, 20, 151, 251, 43, 75, 141, 52, 79, 49, 25, 70, 5, 174, 105, 29, 97, 243, 169, 96, 219, 177, 57, 159, 203, 199, 61, 205, 59, 189, 137, 9, 81, 193, 33, 92, 203, 96, 111, 202, 117, 121, 2, 37, 180, 248, 66, 205, 44, 243, 0, 79, 82, 66, 219, 21, 230, 69, 60, 195, 176, 155, 55, 11, 175, 54, 247, 185, 205, 193, 233, 230, 30, 119, 49, 57, 24, 195, 226, 89, 166, 111, 22, 177, 172, 67, 25, 106, 66, 17, 204, 127, 161, 12, 49, 46, 203, 255, 27, 201, 255, 50, 221, 28, 221, 214, 156, 83, 174, 57, 218, 197, 209, 212, 100, 59, 153, 228, 38, 230, 247, 124, 138, 208, 242, 94, 163, 129, 90, 154, 23, 81, 130, 116, 176, 95, 210, 201, 55, 48, 14, 239, 81, 150, 41, 255, 5, 204, 163, 226, 233, 220, 182, 237, 204, 57, 190, 137, 179, 47, 21, 72, 18, 114, 232, 88, 60, 144, 228, 149, 30, 62, 110, 174, 119, 45, 201, 243, 50, 30, 250, 46, 243, 161, 178, 102, 202, 45, 148, 52, 29, 34, 210, 213, 40, 9, 126, 182, 121, 113, 247, 82, 68, 189, 77, 198, 53, 171, 133, 237, 204, 253, 124, 231, 220, 37, 212, 132, 243, 157, 89, 33, 108, 79, 89, 24, 191, 161, 228, 183, 196, 190, 73, 7, 218, 80, 230, 210, 254, 148, 193, 34, 169, 223, 103, 212, 172, 119, 219, 150, 53, 31, 236, 68, 175, 253, 4, 211, 62, 51, 229, 122, 33, 76, 90, 2, 250, 145, 28, 72, 113, 169, 97, 20, 119, 32, 179, 29, 44, 3, 169, 217, 159, 230, 147, 24, 204, 136, 165, 147, 138, 115, 168, 149, 179, 204, 199, 254, 230, 158, 126, 14, 132, 157, 88, 235, 231, 184, 134, 141, 137, 200, 244, 187, 36, 9, 129, 11, 160, 112, 232, 44, 120, 1, 242, 193, 187, 208, 199, 252, 245, 207, 191, 30, 192, 105, 0, 150, 131, 212, 164, 57, 57, 174, 159, 6, 7, 2, 56, 213, 249, 253, 44, 228, 31, 47, 13, 125, 142, 195, 239, 32, 19, 236, 95, 19, 142, 111, 10, 133, 117, 63, 110, 250, 30, 12, 169, 164, 171, 64, 42, 175, 133, 223, 163, 52, 172, 221, 194, 165, 136, 27, 115, 218, 35, 57, 84, 221, 135, 79, 32, 193, 117, 160, 215, 110, 141, 87, 61, 160, 247, 158, 6, 39, 66, 239, 120, 2, 36, 116, 255, 37, 177, 103, 133, 212, 186, 139, 161, 180, 223, 147, 92, 137, 50, 133, 78, 163, 132, 177, 144, 32, 248, 18, 201, 55, 171, 52, 83, 154, 72, 174, 66, 153, 78, 243, 164, 110, 129, 146, 107, 22, 145, 252, 109, 74, 159, 151, 40, 25, 198, 157, 241, 103, 155, 231, 28, 234, 180, 93, 70, 45, 149, 33, 116, 35, 122, 187, 82, 75, 202, 152, 2, 207, 118, 21, 181, 230, 159, 79, 169, 148, 227, 168, 216, 6, 50, 125, 9, 245, 241, 56, 243, 188, 137, 28, 12, 148, 32, 116, 35, 229, 193, 234, 83, 198, 135, 56, 129, 242, 24, 146, 98, 173, 247, 50, 238, 245, 2, 101, 3, 248, 27, 37, 33, 167, 174, 73, 53, 198, 191, 81, 81, 201, 105, 110, 212, 185, 44, 205, 91, 248, 133, 121, 190, 172, 32, 141, 36, 60, 192, 124, 208, 107, 153, 28, 8, 235, 19, 247, 113, 84, 42, 215, 52, 146, 215, 81, 2, 29, 89, 26, 24, 155, 133, 219, 81, 178, 192, 61, 44, 245, 167, 0, 148, 81, 226, 22, 202, 208, 51, 143, 138, 220, 41, 250, 128, 109, 40, 33, 47, 105, 38, 62, 66, 205, 140, 172, 176, 233, 90, 226, 0, 102, 72, 196, 6, 31, 160, 242, 27, 246, 162, 228, 139, 13, 169, 240, 247, 47, 25, 143, 61, 188, 134, 228, 148, 4, 12, 37, 137, 110, 76, 201, 76, 83, 153, 29, 61, 28, 194, 147, 73, 126, 197, 242, 180, 171, 117, 168, 40, 235, 146, 201, 215, 64, 254, 104, 191, 105, 3, 229, 213, 29, 0, 96, 99, 200, 153, 209, 220, 176, 37, 128, 35, 33, 67, 208, 235, 144, 1, 230, 245, 148, 254, 7, 66, 38, 230, 247, 160, 245, 63, 13, 110, 0, 176, 3, 148, 71, 24, 202, 13, 180, 208, 3, 74, 19, 219, 1, 81, 76, 222, 83, 0, 142, 69, 220, 81, 116, 10, 162, 244, 57, 31, 38, 162, 52, 134, 18, 144, 49, 237, 110, 200, 137, 180, 3, 228, 150, 206, 3, 61, 205, 24, 110, 132, 214, 247, 114, 160, 53, 66, 70, 56, 143, 34, 150, 161, 244, 207, 90, 197, 7, 166, 225, 104, 138, 11, 29, 72, 165, 68, 141, 55, 20, 159, 150, 24, 242, 56, 165, 85, 144, 138, 218, 169, 230, 120, 218, 80, 28, 160, 67, 149, 175, 187, 18, 197, 97, 222, 97, 178, 35, 107, 53, 202, 9, 183, 59, 165, 250, 206, 162, 56, 71, 208, 156, 91, 9, 134, 30, 122, 30, 201, 75, 157, 182, 9, 140, 236, 230, 47, 83, 235, 210, 9, 41, 47, 166, 3, 181, 94, 189, 65, 242, 59, 202, 163, 55, 133, 201, 182, 116, 80, 94, 177, 57, 84, 62, 130, 219, 126, 13, 101, 193, 10, 157, 179, 50, 35, 117, 238, 7, 22, 51, 146, 44, 41, 236, 75, 9, 153, 175, 154, 143, 156, 212, 239, 12, 106, 185, 250, 146, 138, 232, 57, 148, 225, 116, 250, 170, 17, 192, 166, 84, 182, 202, 221, 230, 165, 110, 226, 116, 154, 66, 25, 130, 14, 166, 242, 222, 38, 154, 23, 238, 135, 50, 217, 143, 255, 28, 101, 122, 188, 152, 74, 55, 59, 214, 92, 99, 68, 202, 64, 254, 149, 240, 1, 55, 161, 4, 152, 144, 4, 123, 52, 37, 176, 117, 164, 194, 178, 166, 47, 5, 31, 56, 13, 71, 80, 2, 232, 63, 24, 47, 124, 177, 68, 209, 254, 115, 35, 101, 249, 186, 142, 165, 62, 234, 41, 84, 150, 142, 219, 54, 209, 188, 124, 95, 32, 57, 151, 74, 106, 240, 171, 84, 164, 225, 96, 74, 66, 238, 78, 9, 145, 227, 41, 53, 232, 34, 74, 205, 35, 195, 220, 99, 42, 163, 228, 137, 35, 77, 191, 126, 129, 126, 221, 25, 113, 176, 215, 169, 248, 189, 63, 51, 78, 228, 22, 147, 162, 140, 220, 8, 156, 17, 9, 125, 238, 76, 121, 198, 195, 169, 165, 245, 178, 192, 59, 171, 6, 118, 163, 84, 198, 55, 205, 187, 252, 156, 202, 186, 114, 133, 209, 43, 89, 26, 237, 244, 163, 33, 104, 46, 36, 244, 237, 159, 83, 160, 104, 48, 231, 44, 242, 218, 14, 134, 98, 2, 30, 47, 32, 156, 108, 9, 121, 239, 190, 52, 99, 152, 101, 132, 149, 205, 33, 207, 224, 60, 200, 120, 228, 38, 100, 244, 128, 4, 213, 131, 205, 239, 41, 80, 100, 205, 110, 80, 142, 190, 11, 77, 80, 228, 208, 36, 72, 144, 234, 9, 21, 171, 120, 28, 138, 17, 188, 208, 233, 107, 163, 140, 198, 66, 113, 13, 22, 220, 122, 2, 29, 77, 159, 243, 189, 49, 205, 76, 120, 190, 46, 80, 205, 128, 163, 33, 33, 187, 218, 176, 50, 244, 44, 221, 205, 245, 95, 52, 255, 15, 55, 227, 124, 197, 244, 59, 20, 242, 58, 198, 34, 158, 44, 1, 188, 131, 116, 203, 220, 50, 80, 193, 134, 118, 80, 38, 209, 190, 0, 70, 123, 125, 250, 65, 31, 202, 15, 169, 202, 130, 141, 160, 15, 243, 115, 200, 165, 187, 162, 185, 182, 173, 50, 242, 3, 74, 51, 100, 118, 131, 220, 207, 127, 55, 191, 63, 134, 44, 129, 33, 2, 176, 48, 21, 113, 139, 216, 149, 166, 239, 61, 80, 65, 6, 23, 110, 69, 182, 123, 246, 78, 51, 238, 44, 248, 10, 10, 208, 204, 114, 131, 119, 49, 215, 27, 7, 224, 102, 167, 125, 25, 168, 58, 202, 120, 200, 149, 236, 195, 21, 80, 64, 202, 79, 16, 183, 62, 94, 154, 99, 108, 63, 18, 192, 120, 104, 6, 39, 193, 90, 0, 254, 237, 252, 126, 6, 165, 31, 122, 57, 243, 55, 45, 134, 46, 4, 189, 160, 151, 249, 11, 40, 117, 235, 43, 200, 87, 111, 63, 74, 59, 68, 149, 61, 44, 236, 14, 113, 134, 107, 156, 182, 238, 80, 58, 88, 111, 168, 10, 73, 22, 140, 3, 112, 8, 20, 45, 123, 70, 193, 49, 23, 133, 60, 169, 90, 150, 83, 249, 230, 229, 70, 211, 222, 45, 112, 78, 47, 72, 157, 28, 143, 228, 56, 194, 84, 176, 51, 235, 121, 40, 120, 161, 109, 66, 191, 231, 32, 61, 178, 35, 148, 163, 7, 104, 70, 185, 181, 128, 108, 137, 153, 246, 5, 199, 176, 28, 20, 116, 210, 27, 17, 241, 172, 9, 96, 6, 20, 124, 210, 10, 241, 112, 106, 203, 254, 159, 131, 184, 150, 69, 75, 144, 187, 230, 188, 239, 103, 144, 191, 194, 183, 185, 3, 192, 80, 0, 35, 28, 92, 59, 208, 167, 35, 52, 107, 45, 22, 125, 238, 106, 192, 198, 208, 196, 181, 254, 143, 86, 102, 92, 22, 51, 3, 126, 26, 13, 46, 7, 61, 68, 218, 9, 11, 161, 36, 82, 107, 20, 233, 0, 173, 223, 22, 222, 129, 156, 24, 27, 20, 121, 2, 200, 0, 53, 223, 92, 191, 9, 138, 2, 30, 0, 173, 169, 155, 67, 196, 249, 189, 211, 127, 87, 232, 161, 247, 134, 150, 34, 139, 123, 65, 121, 12, 187, 21, 184, 247, 215, 230, 57, 124, 184, 1, 192, 35, 14, 158, 30, 232, 243, 0, 68, 184, 22, 47, 40, 112, 223, 106, 193, 242, 230, 175, 157, 32, 91, 66, 17, 202, 22, 15, 14, 157, 228, 66, 19, 244, 209, 214, 134, 168, 231, 187, 156, 55, 182, 149, 166, 92, 214, 252, 13, 128, 199, 32, 143, 217, 217, 136, 178, 127, 179, 224, 27, 200, 162, 102, 171, 107, 253, 19, 90, 10, 142, 128, 214, 182, 223, 122, 253, 119, 135, 102, 123, 40, 19, 249, 118, 200, 227, 184, 74, 206, 251, 119, 134, 178, 144, 125, 88, 29, 217, 50, 192, 62, 222, 185, 95, 58, 255, 159, 6, 17, 165, 15, 179, 17, 113, 208, 36, 24, 0, 96, 11, 231, 119, 187, 148, 190, 150, 235, 118, 129, 150, 189, 39, 160, 192, 209, 78, 80, 56, 91, 38, 216, 25, 159, 245, 225, 59, 65, 172, 176, 53, 180, 62, 159, 2, 205, 182, 123, 189, 126, 39, 65, 18, 233, 19, 144, 187, 244, 21, 104, 237, 218, 4, 138, 69, 123, 62, 112, 237, 119, 204, 53, 207, 129, 88, 249, 231, 230, 26, 163, 32, 57, 192, 119, 239, 110, 150, 50, 206, 211, 17, 158, 173, 33, 88, 21, 210, 8, 166, 231, 236, 239, 195, 59, 136, 36, 108, 31, 30, 130, 226, 38, 59, 2, 184, 4, 138, 15, 124, 4, 81, 69, 182, 52, 56, 214, 96, 30, 152, 97, 254, 14, 130, 164, 255, 57, 102, 76, 126, 182, 81, 50, 228, 208, 49, 167, 48, 130, 57, 148, 171, 247, 44, 38, 23, 84, 24, 70, 149, 116, 89, 228, 156, 247, 10, 21, 136, 17, 234, 63, 150, 41, 53, 108, 170, 128, 43, 153, 49, 140, 114, 218, 26, 40, 155, 199, 247, 140, 123, 46, 109, 164, 113, 255, 148, 235, 217, 170, 95, 195, 82, 250, 184, 54, 8, 50, 189, 202, 153, 223, 247, 8, 202, 234, 103, 177, 179, 105, 15, 185, 176, 219, 80, 230, 243, 231, 25, 183, 20, 118, 49, 231, 28, 230, 180, 145, 129, 212, 246, 60, 81, 193, 59, 231, 166, 38, 193, 83, 208, 140, 239, 8, 205, 254, 89, 72, 87, 49, 255, 10, 5, 94, 140, 66, 92, 77, 235, 10, 173, 209, 126, 62, 94, 185, 48, 8, 192, 182, 144, 222, 188, 47, 36, 64, 29, 138, 184, 128, 105, 97, 35, 196, 243, 17, 190, 67, 243, 57, 199, 22, 35, 158, 233, 228, 71, 45, 187, 176, 0, 90, 34, 111, 130, 100, 146, 139, 32, 199, 216, 106, 121, 111, 150, 55, 53, 172, 28, 176, 210, 121, 22, 124, 12, 121, 245, 254, 12, 9, 114, 239, 65, 47, 127, 40, 180, 150, 127, 239, 245, 223, 22, 10, 187, 246, 225, 96, 104, 233, 73, 130, 227, 32, 79, 227, 127, 1, 252, 11, 34, 128, 36, 155, 133, 31, 45, 52, 3, 81, 97, 199, 165, 13, 110, 134, 150, 22, 27, 186, 110, 225, 101, 36, 47, 81, 63, 66, 45, 9, 160, 8, 76, 134, 4, 200, 173, 32, 206, 241, 191, 144, 52, 239, 127, 124, 64, 250, 174, 91, 22, 165, 15, 100, 49, 76, 202, 195, 251, 47, 210, 109, 28, 46, 220, 150, 163, 239, 61, 5, 174, 215, 92, 112, 151, 65, 171, 205, 125, 14, 105, 1, 153, 208, 8, 89, 146, 110, 244, 218, 79, 135, 132, 10, 55, 133, 171, 19, 36, 148, 101, 153, 139, 187, 153, 126, 126, 122, 243, 137, 166, 253, 128, 132, 243, 62, 133, 102, 222, 159, 32, 74, 78, 226, 30, 150, 0, 44, 250, 165, 93, 91, 50, 124, 9, 165, 163, 229, 250, 248, 128, 56, 64, 79, 196, 165, 198, 93, 32, 203, 216, 193, 136, 103, 182, 180, 66, 178, 69, 202, 133, 206, 166, 223, 106, 144, 122, 249, 26, 68, 104, 71, 67, 106, 93, 207, 228, 83, 91, 52, 204, 68, 152, 179, 204, 73, 104, 175, 10, 248, 54, 246, 1, 208, 44, 188, 4, 192, 181, 101, 94, 211, 166, 76, 63, 6, 96, 63, 243, 255, 22, 208, 67, 188, 136, 56, 171, 110, 5, 113, 133, 87, 32, 226, 240, 219, 119, 41, 115, 12, 22, 70, 66, 194, 219, 92, 136, 45, 94, 13, 175, 90, 54, 196, 69, 222, 48, 248, 34, 164, 218, 30, 134, 82, 253, 251, 12, 167, 223, 43, 80, 133, 178, 131, 177, 100, 151, 3, 247, 249, 190, 128, 28, 94, 43, 164, 158, 225, 129, 75, 0, 203, 66, 94, 53, 235, 37, 43, 23, 236, 7, 190, 13, 50, 150, 52, 64, 18, 254, 205, 144, 52, 237, 18, 64, 3, 196, 45, 6, 34, 174, 251, 218, 246, 164, 144, 171, 60, 176, 27, 36, 75, 124, 8, 45, 91, 23, 64, 70, 164, 135, 32, 235, 163, 133, 85, 33, 19, 248, 185, 208, 114, 248, 17, 228, 72, 185, 15, 241, 154, 4, 43, 65, 47, 247, 66, 200, 145, 244, 61, 68, 80, 199, 7, 238, 189, 38, 68, 244, 195, 19, 126, 87, 3, 118, 133, 158, 239, 11, 0, 7, 65, 130, 241, 174, 208, 243, 37, 153, 244, 75, 129, 138, 22, 253, 23, 229, 207, 126, 149, 201, 193, 10, 86, 183, 76, 11, 169, 6, 21, 100, 186, 216, 244, 159, 71, 149, 108, 251, 158, 138, 102, 189, 151, 241, 226, 73, 77, 230, 154, 47, 80, 241, 8, 157, 188, 246, 81, 41, 247, 113, 237, 14, 100, 60, 115, 167, 181, 209, 143, 253, 74, 26, 59, 155, 190, 110, 169, 214, 80, 188, 195, 225, 129, 107, 94, 73, 69, 55, 185, 253, 158, 97, 184, 84, 219, 4, 134, 33, 148, 20, 115, 0, 149, 55, 248, 29, 229, 203, 127, 151, 217, 118, 131, 38, 170, 220, 238, 3, 140, 199, 23, 216, 48, 253, 80, 245, 48, 50, 96, 7, 176, 28, 96, 16, 164, 239, 95, 131, 82, 207, 91, 81, 232, 8, 169, 37, 95, 65, 1, 144, 151, 67, 106, 212, 75, 166, 61, 36, 173, 95, 11, 81, 237, 225, 101, 220, 207, 178, 96, 87, 95, 30, 1, 205, 216, 137, 94, 223, 191, 67, 51, 102, 251, 140, 107, 62, 108, 254, 246, 205, 232, 55, 27, 225, 98, 142, 71, 153, 113, 249, 232, 47, 63, 99, 32, 219, 199, 243, 144, 42, 188, 39, 52, 147, 191, 64, 58, 108, 6, 217, 51, 254, 7, 241, 231, 190, 219, 156, 187, 93, 224, 156, 195, 17, 47, 144, 9, 32, 82, 3, 95, 130, 132, 181, 179, 33, 147, 101, 86, 230, 73, 26, 116, 66, 100, 163, 190, 14, 98, 187, 151, 152, 223, 54, 184, 195, 135, 89, 166, 239, 104, 136, 253, 166, 25, 63, 124, 176, 21, 62, 223, 115, 218, 108, 133, 80, 191, 92, 204, 34, 104, 253, 94, 61, 227, 154, 131, 204, 223, 80, 161, 139, 38, 232, 25, 247, 132, 216, 250, 73, 121, 7, 26, 128, 223, 64, 234, 219, 17, 5, 207, 179, 207, 231, 155, 214, 237, 243, 133, 170, 158, 94, 25, 186, 144, 107, 7, 56, 6, 202, 35, 191, 29, 10, 254, 152, 93, 112, 80, 22, 44, 7, 0, 228, 216, 57, 9, 242, 174, 1, 18, 86, 146, 244, 245, 11, 161, 23, 50, 10, 50, 10, 37, 193, 97, 144, 23, 236, 49, 72, 110, 57, 11, 162, 108, 215, 121, 99, 181, 154, 80, 148, 206, 76, 148, 90, 202, 218, 65, 2, 176, 13, 124, 57, 11, 114, 119, 63, 236, 245, 91, 5, 145, 111, 127, 38, 36, 183, 132, 74, 181, 230, 133, 182, 144, 27, 124, 25, 132, 109, 30, 73, 96, 99, 6, 190, 12, 28, 11, 61, 95, 34, 184, 236, 107, 30, 36, 56, 45, 7, 217, 5, 210, 234, 212, 166, 65, 39, 68, 4, 176, 16, 10, 157, 178, 3, 77, 90, 2, 0, 125, 192, 219, 33, 1, 52, 237, 222, 159, 64, 44, 246, 49, 136, 229, 189, 9, 96, 15, 196, 11, 84, 216, 251, 47, 27, 56, 191, 11, 74, 245, 228, 129, 80, 254, 193, 115, 102, 188, 183, 66, 108, 212, 47, 122, 241, 25, 52, 251, 142, 54, 215, 89, 144, 50, 78, 123, 205, 67, 82, 250, 156, 9, 149, 195, 121, 22, 242, 162, 182, 73, 233, 235, 130, 205, 107, 8, 9, 201, 161, 231, 75, 4, 255, 69, 191, 13, 73, 148, 35, 161, 136, 153, 16, 172, 1, 177, 62, 23, 93, 159, 186, 203, 1, 124, 72, 35, 0, 64, 146, 120, 63, 40, 202, 37, 9, 238, 134, 194, 198, 86, 132, 94, 192, 86, 40, 181, 231, 219, 88, 61, 159, 21, 54, 64, 51, 253, 53, 175, 253, 37, 200, 62, 177, 2, 100, 231, 56, 26, 97, 67, 212, 66, 211, 119, 2, 36, 47, 93, 136, 240, 146, 6, 104, 217, 123, 31, 34, 168, 21, 19, 250, 76, 130, 234, 15, 126, 7, 77, 186, 15, 32, 219, 190, 95, 17, 205, 7, 235, 234, 246, 151, 50, 251, 124, 121, 19, 78, 130, 51, 237, 14, 104, 240, 191, 67, 88, 88, 58, 28, 114, 60, 184, 232, 10, 75, 46, 7, 240, 33, 109, 9, 0, 180, 166, 61, 136, 124, 238, 208, 52, 115, 231, 35, 144, 83, 101, 31, 175, 125, 107, 232, 67, 79, 241, 218, 127, 128, 212, 191, 47, 144, 223, 249, 116, 30, 20, 5, 20, 26, 235, 14, 208, 135, 216, 25, 10, 165, 75, 11, 22, 185, 31, 90, 122, 135, 65, 62, 138, 75, 16, 223, 152, 42, 4, 15, 64, 220, 199, 127, 190, 45, 160, 231, 187, 163, 228, 140, 36, 200, 161, 102, 213, 18, 173, 186, 231, 170, 39, 54, 17, 147, 44, 191, 152, 50, 168, 208, 245, 133, 84, 210, 235, 58, 36, 127, 73, 37, 90, 60, 237, 169, 78, 33, 53, 48, 132, 33, 53, 240, 6, 74, 125, 117, 85, 231, 54, 84, 225, 40, 59, 246, 117, 168, 60, 138, 188, 37, 225, 254, 96, 158, 61, 107, 83, 137, 137, 148, 203, 253, 119, 84, 205, 128, 61, 168, 242, 56, 255, 98, 129, 90, 6, 75, 35, 1, 128, 209, 214, 50, 46, 1, 108, 194, 244, 106, 95, 231, 123, 215, 104, 107, 62, 218, 60, 115, 173, 133, 84, 201, 25, 191, 206, 79, 37, 4, 48, 136, 178, 121, 140, 117, 218, 198, 80, 217, 63, 238, 71, 152, 64, 101, 85, 229, 201, 238, 217, 219, 140, 55, 107, 199, 176, 118, 36, 47, 119, 158, 111, 1, 149, 223, 145, 55, 85, 30, 100, 60, 57, 116, 105, 135, 158, 136, 244, 219, 14, 208, 250, 123, 51, 84, 251, 22, 144, 202, 230, 75, 237, 128, 216, 244, 74, 144, 116, 156, 91, 56, 170, 0, 126, 3, 9, 147, 174, 138, 214, 13, 146, 173, 110, 67, 164, 174, 118, 132, 172, 136, 211, 204, 216, 8, 9, 142, 103, 67, 106, 244, 218, 136, 199, 5, 36, 65, 23, 104, 233, 58, 10, 229, 228, 29, 48, 202, 156, 217, 197, 163, 14, 91, 95, 207, 45, 85, 242, 119, 38, 215, 217, 221, 195, 244, 79, 139, 166, 169, 22, 22, 137, 180, 89, 90, 177, 51, 101, 173, 116, 97, 30, 85, 117, 205, 175, 175, 144, 133, 119, 83, 217, 64, 135, 82, 105, 237, 55, 50, 103, 82, 107, 19, 162, 120, 116, 95, 165, 176, 241, 232, 174, 148, 251, 50, 20, 15, 184, 26, 74, 211, 159, 247, 67, 180, 139, 104, 29, 178, 225, 107, 40, 196, 189, 19, 164, 125, 204, 133, 98, 23, 202, 137, 128, 178, 190, 128, 223, 155, 243, 31, 133, 184, 100, 102, 144, 111, 81, 93, 255, 22, 243, 215, 47, 85, 222, 17, 10, 73, 190, 217, 107, 63, 211, 57, 199, 135, 157, 80, 26, 145, 211, 228, 96, 150, 42, 148, 6, 35, 16, 142, 61, 232, 1, 121, 252, 252, 189, 125, 111, 128, 116, 241, 78, 40, 133, 177, 144, 117, 109, 101, 175, 125, 26, 34, 239, 160, 143, 191, 40, 48, 214, 111, 33, 245, 219, 214, 6, 42, 7, 102, 66, 14, 175, 21, 160, 229, 110, 47, 36, 23, 196, 142, 65, 81, 2, 120, 1, 154, 225, 62, 1, 108, 7, 89, 181, 124, 2, 104, 135, 200, 172, 234, 195, 170, 136, 187, 46, 251, 67, 234, 152, 197, 180, 34, 14, 89, 240, 40, 180, 214, 94, 132, 56, 7, 187, 216, 220, 215, 183, 222, 77, 132, 242, 25, 124, 47, 104, 15, 168, 16, 213, 84, 148, 134, 161, 223, 9, 69, 50, 185, 72, 200, 142, 145, 180, 127, 239, 82, 7, 229, 132, 132, 221, 10, 149, 34, 239, 129, 168, 124, 252, 47, 33, 227, 138, 31, 131, 54, 11, 201, 46, 221, 206, 8, 155, 155, 247, 130, 132, 168, 74, 131, 65, 15, 55, 227, 57, 31, 218, 97, 124, 11, 115, 237, 95, 163, 116, 118, 76, 133, 116, 231, 227, 32, 231, 149, 253, 128, 227, 32, 98, 12, 25, 197, 206, 247, 126, 255, 4, 34, 150, 243, 16, 55, 196, 28, 8, 113, 164, 164, 72, 40, 11, 54, 73, 199, 194, 34, 68, 150, 200, 208, 142, 224, 62, 140, 133, 108, 10, 22, 6, 64, 113, 149, 43, 66, 28, 226, 97, 4, 54, 160, 46, 151, 0, 78, 129, 130, 53, 46, 135, 102, 254, 182, 8, 27, 59, 102, 33, 110, 142, 93, 27, 178, 210, 205, 53, 237, 33, 2, 248, 24, 213, 145, 35, 222, 133, 150, 160, 115, 33, 22, 127, 57, 100, 32, 74, 10, 116, 57, 17, 50, 124, 157, 1, 249, 27, 250, 67, 196, 114, 42, 178, 189, 115, 173, 33, 171, 222, 27, 40, 93, 94, 166, 153, 123, 94, 137, 244, 200, 226, 137, 230, 126, 22, 126, 7, 213, 31, 6, 226, 57, 144, 73, 224, 86, 38, 223, 0, 34, 154, 15, 160, 73, 218, 7, 226, 132, 251, 192, 95, 146, 25, 142, 155, 183, 122, 38, 25, 46, 111, 246, 38, 85, 148, 1, 212, 206, 161, 100, 184, 68, 203, 174, 230, 88, 43, 74, 114, 95, 200, 104, 151, 242, 203, 169, 141, 147, 108, 95, 91, 32, 49, 148, 183, 95, 174, 22, 208, 68, 249, 235, 231, 26, 92, 61, 163, 255, 133, 148, 209, 166, 63, 85, 81, 236, 29, 230, 171, 123, 124, 166, 57, 111, 131, 132, 227, 15, 50, 123, 87, 213, 229, 205, 125, 251, 83, 133, 36, 42, 169, 120, 210, 133, 241, 138, 111, 109, 169, 122, 10, 175, 249, 125, 27, 17, 121, 183, 124, 71, 132, 141, 42, 153, 143, 82, 184, 21, 242, 73, 119, 131, 56, 193, 139, 136, 178, 84, 92, 176, 51, 124, 89, 211, 175, 21, 162, 98, 139, 73, 28, 160, 154, 176, 16, 90, 239, 219, 65, 179, 63, 43, 131, 246, 15, 80, 28, 195, 53, 144, 187, 247, 100, 132, 159, 223, 133, 245, 33, 142, 120, 30, 146, 119, 43, 153, 0, 57, 218, 146, 124, 2, 128, 184, 204, 91, 6, 139, 184, 195, 67, 240, 21, 226, 236, 126, 62, 20, 225, 84, 226, 38, 110, 132, 60, 117, 115, 160, 20, 112, 23, 6, 155, 191, 161, 15, 123, 43, 180, 124, 236, 104, 208, 23, 254, 44, 204, 50, 127, 59, 67, 225, 74, 55, 66, 241, 248, 189, 208, 60, 4, 208, 1, 90, 27, 63, 131, 28, 92, 155, 103, 244, 255, 10, 90, 239, 55, 131, 18, 92, 146, 52, 24, 11, 150, 245, 207, 64, 41, 235, 119, 225, 239, 16, 43, 78, 243, 12, 166, 193, 233, 136, 98, 42, 242, 64, 163, 185, 215, 67, 144, 129, 236, 35, 104, 137, 43, 21, 250, 13, 43, 152, 72, 21, 123, 220, 143, 42, 94, 52, 130, 74, 231, 250, 55, 147, 237, 202, 111, 145, 252, 192, 176, 226, 80, 105, 22, 80, 6, 13, 154, 235, 205, 55, 215, 254, 128, 218, 21, 252, 81, 198, 77, 168, 69, 150, 128, 188, 120, 41, 35, 214, 63, 157, 90, 186, 178, 42, 109, 217, 229, 37, 109, 227, 38, 139, 227, 152, 206, 250, 93, 60, 153, 50, 37, 231, 49, 7, 255, 151, 241, 37, 224, 54, 42, 221, 46, 239, 115, 219, 113, 157, 64, 213, 39, 28, 66, 21, 245, 94, 232, 247, 181, 20, 113, 18, 196, 34, 38, 65, 194, 196, 195, 144, 16, 181, 11, 146, 165, 241, 91, 33, 243, 236, 179, 8, 111, 141, 2, 68, 51, 220, 102, 210, 190, 3, 113, 139, 189, 161, 32, 136, 90, 114, 128, 141, 32, 243, 232, 121, 16, 235, 63, 18, 82, 209, 206, 200, 121, 126, 150, 141, 124, 93, 72, 64, 60, 23, 233, 27, 85, 89, 184, 6, 10, 9, 171, 52, 210, 57, 15, 216, 128, 216, 11, 32, 15, 227, 179, 72, 200, 179, 176, 90, 192, 108, 115, 82, 71, 104, 157, 250, 18, 241, 186, 56, 33, 56, 197, 96, 26, 124, 11, 201, 24, 123, 64, 54, 110, 64, 174, 206, 49, 144, 158, 95, 43, 2, 104, 11, 189, 240, 247, 160, 15, 4, 40, 93, 250, 175, 144, 170, 55, 25, 229, 103, 5, 3, 146, 101, 38, 65, 207, 246, 33, 226, 187, 127, 0, 90, 62, 252, 178, 51, 51, 33, 226, 63, 10, 154, 60, 69, 97, 49, 196, 194, 183, 133, 84, 188, 215, 145, 188, 135, 227, 87, 16, 129, 14, 128, 220, 198, 71, 32, 201, 197, 94, 69, 118, 155, 132, 159, 25, 150, 234, 214, 197, 123, 195, 180, 185, 81, 183, 121, 150, 128, 78, 148, 102, 113, 12, 85, 68, 57, 105, 233, 177, 197, 157, 183, 247, 218, 151, 167, 220, 183, 207, 49, 185, 90, 87, 30, 13, 195, 246, 73, 130, 164, 115, 127, 106, 142, 15, 202, 120, 103, 161, 37, 96, 42, 201, 135, 168, 34, 147, 111, 155, 235, 132, 118, 103, 3, 85, 212, 218, 46, 207, 139, 169, 210, 116, 199, 50, 176, 4, 52, 7, 1, 228, 197, 44, 2, 216, 138, 10, 171, 158, 79, 185, 91, 63, 102, 62, 55, 238, 210, 134, 207, 80, 101, 240, 138, 18, 0, 41, 167, 143, 13, 157, 191, 204, 188, 139, 21, 19, 174, 209, 64, 149, 217, 75, 74, 227, 7, 201, 84, 83, 240, 94, 72, 174, 189, 63, 28, 114, 101, 30, 130, 82, 27, 121, 45, 96, 85, 40, 94, 240, 85, 243, 255, 186, 80, 128, 230, 238, 205, 112, 239, 106, 195, 4, 72, 38, 202, 95, 196, 65, 240, 22, 244, 188, 214, 165, 125, 37, 164, 186, 111, 156, 208, 159, 144, 81, 109, 86, 194, 113, 0, 233, 190, 128, 62, 40, 117, 106, 52, 65, 170, 209, 63, 160, 226, 204, 39, 64, 107, 81, 86, 156, 125, 165, 48, 10, 82, 233, 246, 71, 220, 42, 247, 110, 176, 247, 210, 13, 55, 67, 17, 192, 7, 22, 60, 239, 51, 196, 109, 18, 118, 67, 142, 138, 38, 96, 81, 103, 208, 193, 80, 188, 219, 134, 144, 247, 111, 77, 72, 199, 189, 6, 225, 98, 75, 22, 6, 65, 9, 16, 211, 32, 71, 77, 150, 240, 232, 195, 64, 232, 129, 243, 148, 127, 107, 50, 99, 60, 30, 178, 191, 239, 102, 208, 221, 217, 164, 168, 94, 61, 0, 242, 23, 100, 22, 93, 202, 1, 243, 161, 247, 117, 4, 42, 203, 43, 180, 85, 201, 210, 92, 190, 127, 132, 242, 14, 18, 235, 12, 249, 190, 128, 117, 33, 7, 2, 17, 78, 46, 24, 13, 69, 181, 88, 103, 199, 98, 68, 44, 109, 83, 40, 15, 192, 135, 213, 160, 184, 253, 231, 32, 155, 124, 35, 210, 107, 229, 92, 14, 101, 39, 125, 143, 104, 239, 192, 197, 105, 15, 225, 64, 103, 40, 183, 209, 230, 13, 252, 212, 220, 255, 83, 72, 242, 182, 133, 29, 215, 133, 220, 166, 121, 97, 51, 232, 249, 22, 32, 159, 93, 62, 11, 174, 132, 140, 82, 235, 161, 252, 36, 156, 145, 230, 239, 191, 18, 142, 55, 64, 209, 73, 203, 64, 220, 220, 215, 74, 0, 68, 4, 208, 26, 81, 22, 207, 127, 16, 37, 103, 186, 54, 128, 70, 40, 12, 185, 179, 55, 104, 107, 50, 246, 211, 158, 44, 140, 130, 76, 178, 35, 145, 94, 49, 228, 115, 196, 83, 195, 220, 226, 138, 47, 65, 38, 228, 33, 72, 247, 140, 29, 7, 37, 90, 172, 1, 177, 204, 101, 32, 47, 229, 99, 200, 95, 120, 41, 4, 86, 229, 123, 180, 130, 107, 184, 240, 1, 178, 171, 133, 249, 176, 34, 196, 197, 62, 130, 38, 233, 121, 144, 74, 29, 202, 94, 2, 52, 137, 183, 48, 231, 5, 63, 62, 16, 17, 192, 169, 144, 73, 119, 35, 68, 65, 26, 167, 33, 110, 52, 89, 12, 125, 192, 39, 16, 222, 132, 40, 201, 24, 210, 23, 210, 199, 179, 202, 197, 124, 131, 132, 244, 37, 115, 191, 19, 33, 65, 240, 100, 136, 0, 187, 65, 75, 131, 155, 255, 55, 16, 122, 33, 159, 153, 223, 223, 67, 126, 138, 80, 142, 31, 33, 162, 222, 209, 28, 127, 22, 165, 53, 142, 87, 130, 234, 29, 217, 241, 117, 67, 120, 35, 136, 106, 192, 73, 136, 242, 33, 252, 26, 12, 15, 65, 92, 235, 73, 104, 114, 126, 13, 17, 165, 191, 148, 174, 143, 82, 206, 157, 234, 87, 176, 4, 112, 8, 100, 36, 113, 35, 116, 66, 1, 137, 111, 65, 110, 69, 191, 250, 135, 15, 203, 32, 10, 246, 176, 5, 40, 251, 56, 199, 103, 163, 88, 192, 199, 103, 80, 45, 225, 75, 17, 45, 35, 139, 160, 25, 224, 18, 192, 243, 144, 64, 106, 57, 197, 234, 16, 251, 14, 17, 86, 19, 20, 95, 191, 14, 162, 242, 180, 199, 32, 190, 157, 251, 90, 136, 12, 73, 61, 205, 253, 70, 5, 174, 181, 15, 164, 53, 165, 37, 180, 100, 193, 83, 136, 222, 201, 13, 136, 127, 139, 43, 12, 182, 134, 162, 150, 190, 66, 216, 66, 187, 19, 162, 154, 12, 128, 82, 200, 58, 32, 109, 249, 100, 84, 134, 204, 55, 94, 156, 204, 82, 195, 193, 161, 166, 239, 165, 148, 251, 183, 11, 101, 140, 241, 55, 85, 180, 229, 214, 146, 224, 228, 10, 244, 232, 246, 70, 247, 13, 109, 190, 180, 13, 101, 3, 255, 129, 74, 179, 94, 64, 5, 178, 250, 155, 68, 89, 189, 250, 22, 70, 187, 118, 220, 69, 25, 79, 146, 238, 251, 10, 227, 169, 237, 46, 218, 173, 99, 151, 180, 141, 33, 52, 174, 121, 105, 125, 154, 144, 47, 244, 216, 194, 85, 134, 2, 79, 134, 102, 139, 133, 233, 136, 11, 128, 119, 35, 42, 99, 58, 17, 154, 137, 174, 39, 46, 111, 69, 210, 16, 204, 69, 242, 30, 124, 103, 154, 49, 158, 3, 113, 156, 15, 17, 46, 3, 7, 200, 131, 183, 15, 34, 89, 227, 49, 104, 6, 23, 125, 39, 255, 167, 161, 9, 250, 24, 179, 17, 119, 7, 119, 66, 156, 149, 184, 112, 33, 20, 91, 183, 10, 196, 138, 103, 162, 244, 131, 46, 64, 148, 153, 187, 0, 98, 215, 73, 245, 244, 171, 13, 59, 65, 235, 245, 23, 136, 212, 199, 199, 2, 99, 156, 137, 184, 160, 185, 0, 90, 95, 171, 69, 0, 107, 64, 235, 246, 139, 40, 179, 146, 119, 115, 128, 149, 1, 110, 134, 138, 39, 222, 3, 57, 130, 38, 32, 61, 83, 117, 49, 138, 151, 133, 79, 130, 161, 136, 28, 69, 128, 172, 143, 229, 22, 94, 158, 8, 169, 105, 35, 33, 135, 77, 7, 72, 43, 152, 13, 113, 160, 204, 186, 121, 85, 130, 245, 32, 143, 234, 115, 16, 65, 90, 88, 30, 138, 29, 124, 2, 178, 81, 188, 100, 254, 223, 13, 90, 223, 221, 156, 192, 97, 16, 129, 190, 0, 9, 170, 125, 204, 245, 166, 86, 115, 160, 174, 56, 246, 253, 100, 0, 0, 32, 0, 73, 68, 65, 84, 22, 48, 8, 42, 144, 180, 16, 210, 197, 159, 130, 182, 123, 173, 53, 124, 129, 104, 249, 56, 30, 249, 182, 172, 13, 65, 23, 200, 240, 113, 17, 228, 109, 180, 208, 27, 98, 247, 135, 32, 190, 108, 213, 10, 214, 133, 164, 246, 103, 32, 215, 175, 107, 243, 24, 8, 213, 21, 154, 6, 189, 239, 222, 144, 81, 234, 48, 232, 3, 47, 70, 20, 92, 51, 6, 34, 138, 46, 16, 55, 249, 198, 252, 29, 13, 61, 103, 85, 192, 18, 192, 44, 72, 221, 233, 5, 73, 152, 182, 76, 76, 40, 75, 181, 17, 202, 178, 29, 8, 217, 165, 239, 71, 101, 38, 217, 119, 16, 109, 219, 50, 170, 130, 235, 244, 128, 220, 217, 159, 122, 237, 93, 160, 23, 89, 78, 168, 118, 47, 68, 218, 76, 59, 72, 3, 26, 98, 126, 191, 136, 210, 141, 32, 214, 129, 178, 155, 159, 130, 34, 160, 66, 225, 100, 61, 160, 119, 56, 24, 34, 142, 195, 33, 245, 237, 62, 200, 194, 234, 70, 87, 237, 8, 69, 81, 109, 9, 45, 81, 119, 66, 182, 142, 170, 19, 128, 133, 36, 129, 201, 66, 119, 200, 15, 176, 14, 196, 190, 86, 131, 150, 139, 99, 32, 53, 101, 73, 194, 12, 40, 237, 251, 124, 40, 158, 239, 83, 104, 188, 67, 33, 117, 47, 215, 22, 42, 30, 156, 8, 5, 146, 88, 232, 135, 200, 239, 209, 19, 113, 110, 213, 0, 249, 73, 22, 67, 6, 181, 164, 88, 194, 38, 40, 124, 108, 62, 36, 27, 93, 6, 217, 72, 230, 162, 212, 156, 62, 3, 145, 33, 13, 144, 157, 98, 39, 20, 147, 83, 82, 3, 91, 138, 250, 2, 206, 135, 156, 15, 131, 16, 213, 242, 189, 13, 122, 136, 164, 178, 36, 123, 65, 20, 94, 107, 88, 12, 177, 220, 77, 32, 171, 166, 221, 105, 115, 24, 228, 184, 114, 133, 192, 221, 16, 25, 120, 44, 76, 128, 62, 162, 203, 178, 147, 138, 61, 53, 160, 116, 169, 34, 180, 204, 116, 65, 54, 177, 185, 92, 42, 180, 239, 129, 133, 153, 136, 127, 104, 87, 80, 205, 3, 203, 35, 195, 222, 82, 36, 47, 160, 43, 36, 184, 156, 130, 40, 110, 127, 1, 180, 86, 237, 5, 177, 171, 170, 177, 166, 10, 96, 26, 150, 204, 182, 183, 64, 36, 220, 221, 4, 9, 211, 69, 157, 94, 149, 66, 79, 68, 194, 249, 10, 16, 161, 135, 252, 51, 63, 66, 19, 52, 67, 22, 66, 86, 180, 180, 112, 163, 126, 16, 199, 240, 157, 23, 31, 67, 84, 214, 43, 225, 30, 131, 161, 68, 133, 197, 230, 186, 125, 161, 13, 20, 150, 36, 172, 2, 61, 247, 237, 208, 154, 188, 11, 196, 130, 167, 160, 52, 76, 173, 1, 178, 66, 174, 7, 61, 255, 231, 208, 58, 159, 52, 115, 111, 134, 132, 187, 243, 32, 1, 55, 84, 217, 188, 86, 240, 12, 244, 45, 190, 128, 132, 209, 143, 32, 155, 77, 34, 52, 33, 146, 54, 59, 64, 222, 51, 91, 101, 234, 98, 196, 171, 96, 90, 155, 178, 191, 78, 53, 64, 14, 33, 95, 207, 110, 11, 153, 52, 119, 129, 62, 188, 205, 127, 39, 150, 60, 1, 252, 12, 242, 14, 238, 2, 45, 23, 239, 67, 31, 237, 52, 72, 190, 177, 134, 166, 86, 144, 204, 51, 28, 154, 32, 63, 152, 126, 13, 40, 45, 41, 239, 194, 249, 16, 161, 95, 8, 189, 207, 208, 118, 111, 181, 128, 173, 161, 103, 235, 96, 198, 240, 79, 100, 237, 88, 198, 252, 225, 70, 29, 141, 105, 245, 82, 207, 156, 184, 153, 57, 127, 164, 215, 126, 38, 85, 253, 210, 221, 173, 242, 52, 6, 226, 210, 114, 154, 91, 45, 174, 72, 133, 85, 249, 247, 115, 113, 61, 170, 242, 233, 11, 36, 39, 179, 116, 159, 94, 107, 170, 158, 73, 109, 210, 12, 42, 180, 155, 140, 87, 43, 217, 214, 180, 249, 187, 131, 52, 148, 105, 154, 29, 97, 174, 103, 183, 143, 95, 104, 198, 2, 42, 123, 232, 74, 167, 111, 40, 20, 252, 40, 115, 126, 210, 166, 211, 133, 209, 222, 232, 77, 198, 83, 160, 214, 54, 55, 250, 165, 119, 194, 85, 148, 109, 249, 8, 106, 103, 237, 225, 148, 205, 253, 57, 150, 230, 15, 188, 235, 61, 16, 24, 246, 47, 20, 37, 0, 27, 59, 232, 7, 124, 186, 120, 129, 185, 183, 221, 145, 220, 127, 145, 150, 0, 118, 240, 218, 95, 98, 188, 204, 234, 38, 166, 223, 185, 44, 245, 39, 252, 127, 129, 86, 8, 204, 27, 110, 244, 91, 136, 253, 93, 2, 213, 245, 95, 12, 25, 143, 14, 70, 220, 59, 213, 14, 98, 149, 121, 44, 111, 121, 117, 237, 1, 16, 123, 182, 129, 28, 27, 35, 238, 229, 186, 19, 209, 50, 229, 166, 121, 15, 131, 244, 235, 16, 188, 236, 253, 94, 215, 251, 253, 4, 180, 150, 159, 0, 169, 131, 247, 66, 190, 6, 183, 20, 205, 48, 51, 142, 71, 157, 182, 126, 144, 236, 115, 7, 170, 183, 229, 77, 18, 244, 129, 222, 215, 163, 40, 53, 183, 111, 111, 218, 108, 32, 204, 149, 80, 162, 106, 228, 105, 100, 152, 213, 244, 54, 148, 127, 80, 2, 229, 180, 167, 216, 106, 82, 97, 233, 14, 230, 252, 60, 30, 198, 164, 194, 202, 36, 185, 170, 211, 239, 40, 106, 23, 243, 143, 204, 177, 207, 204, 111, 139, 161, 25, 186, 55, 229, 25, 60, 201, 107, 183, 28, 160, 79, 206, 153, 210, 147, 228, 113, 84, 162, 41, 25, 247, 102, 54, 11, 171, 78, 193, 213, 168, 208, 239, 211, 189, 246, 53, 205, 24, 82, 55, 142, 74, 122, 128, 131, 76, 231, 1, 21, 12, 236, 75, 198, 151, 128, 78, 84, 53, 242, 180, 37, 32, 15, 230, 89, 2, 90, 49, 218, 201, 220, 127, 49, 229, 16, 128, 197, 6, 170, 70, 210, 59, 78, 91, 94, 2, 24, 202, 228, 82, 113, 125, 169, 124, 7, 87, 182, 24, 104, 198, 233, 227, 207, 3, 231, 63, 68, 165, 234, 185, 109, 227, 41, 25, 204, 157, 164, 164, 71, 0, 118, 9, 88, 17, 50, 236, 124, 2, 73, 145, 231, 65, 217, 51, 137, 161, 68, 57, 96, 50, 20, 197, 107, 43, 116, 79, 64, 184, 116, 107, 45, 224, 94, 40, 158, 240, 17, 72, 117, 59, 3, 178, 210, 249, 21, 66, 179, 96, 67, 200, 176, 243, 22, 20, 93, 212, 23, 114, 109, 151, 243, 94, 126, 5, 57, 164, 252, 101, 6, 144, 29, 229, 120, 72, 45, 181, 176, 13, 84, 177, 212, 133, 222, 16, 59, 247, 195, 201, 174, 134, 108, 15, 155, 66, 214, 194, 70, 200, 155, 123, 11, 50, 170, 191, 91, 75, 96, 95, 115, 225, 15, 32, 143, 218, 245, 40, 13, 91, 238, 8, 25, 22, 252, 155, 119, 54, 237, 190, 181, 239, 52, 200, 92, 124, 15, 180, 150, 78, 67, 169, 133, 172, 143, 57, 119, 121, 148, 194, 118, 136, 71, 242, 22, 129, 214, 80, 32, 234, 50, 208, 139, 220, 6, 233, 169, 217, 73, 176, 33, 100, 15, 121, 27, 178, 222, 61, 14, 133, 156, 253, 166, 140, 107, 189, 9, 125, 64, 11, 155, 34, 154, 16, 61, 81, 234, 50, 190, 8, 122, 63, 22, 47, 132, 100, 156, 211, 2, 215, 190, 19, 50, 60, 217, 42, 36, 63, 135, 242, 39, 178, 3, 88, 29, 22, 182, 12, 85, 68, 49, 173, 202, 228, 77, 148, 22, 224, 110, 2, 121, 61, 149, 174, 148, 150, 33, 108, 217, 208, 73, 140, 47, 1, 125, 169, 245, 235, 76, 239, 28, 203, 230, 143, 12, 92, 47, 207, 18, 80, 77, 108, 67, 201, 34, 253, 25, 46, 189, 150, 119, 9, 216, 218, 180, 117, 165, 100, 138, 197, 140, 54, 223, 184, 135, 218, 200, 50, 105, 12, 67, 41, 181, 124, 108, 74, 159, 63, 154, 239, 208, 222, 124, 147, 146, 98, 16, 230, 254, 177, 37, 192, 245, 5, 124, 111, 168, 40, 77, 106, 61, 4, 50, 53, 94, 7, 205, 178, 157, 160, 56, 130, 131, 145, 156, 33, 252, 1, 34, 54, 228, 199, 193, 191, 11, 57, 106, 14, 64, 220, 47, 177, 15, 164, 149, 132, 12, 70, 54, 184, 180, 146, 237, 100, 138, 192, 2, 72, 43, 122, 11, 225, 72, 166, 111, 17, 95, 218, 26, 17, 133, 179, 187, 96, 103, 120, 31, 168, 166, 210, 124, 68, 197, 50, 66, 28, 192, 66, 119, 200, 104, 117, 63, 20, 233, 148, 4, 87, 155, 113, 236, 9, 25, 184, 242, 133, 175, 39, 80, 112, 26, 14, 166, 184, 192, 101, 84, 14, 219, 159, 10, 156, 27, 210, 2, 108, 25, 153, 45, 157, 182, 255, 80, 6, 156, 164, 235, 124, 72, 25, 121, 54, 162, 164, 224, 205, 153, 47, 239, 190, 22, 56, 218, 204, 230, 61, 41, 161, 121, 50, 201, 175, 204, 51, 185, 28, 160, 21, 101, 72, 219, 133, 74, 244, 60, 195, 156, 215, 143, 228, 44, 170, 192, 163, 127, 237, 70, 146, 247, 83, 66, 103, 158, 18, 176, 211, 40, 237, 104, 62, 35, 99, 147, 139, 253, 41, 131, 222, 143, 109, 48, 47, 126, 167, 130, 15, 125, 156, 121, 192, 151, 153, 175, 134, 142, 197, 245, 89, 186, 159, 77, 107, 138, 144, 110, 50, 191, 55, 52, 215, 222, 58, 229, 58, 195, 25, 101, 24, 147, 34, 200, 44, 67, 77, 3, 75, 45, 120, 121, 138, 42, 183, 166, 130, 97, 67, 53, 144, 96, 94, 232, 163, 206, 88, 166, 80, 196, 64, 150, 170, 129, 111, 80, 218, 201, 92, 234, 131, 62, 109, 126, 147, 225, 34, 19, 103, 153, 190, 131, 115, 190, 95, 171, 189, 221, 146, 247, 155, 148, 67, 241, 13, 212, 102, 76, 11, 168, 53, 103, 141, 50, 174, 225, 227, 120, 231, 165, 92, 70, 205, 240, 60, 31, 167, 35, 201, 21, 152, 156, 234, 13, 74, 109, 154, 78, 113, 30, 183, 224, 213, 74, 84, 181, 237, 247, 73, 158, 154, 114, 254, 238, 230, 165, 62, 144, 49, 150, 229, 205, 88, 210, 250, 252, 157, 50, 63, 219, 205, 172, 70, 83, 233, 234, 100, 169, 77, 101, 36, 197, 33, 46, 167, 76, 209, 46, 86, 141, 219, 149, 115, 210, 233, 148, 113, 101, 51, 202, 116, 250, 10, 115, 214, 165, 77, 65, 43, 12, 30, 73, 177, 176, 179, 171, 244, 128, 221, 40, 34, 189, 139, 42, 147, 210, 197, 57, 214, 138, 50, 121, 31, 111, 62, 192, 158, 41, 31, 246, 58, 146, 59, 86, 97, 60, 23, 155, 123, 89, 3, 219, 202, 20, 17, 126, 30, 232, 123, 3, 147, 33, 196, 222, 243, 224, 185, 20, 23, 46, 155, 0, 182, 50, 3, 62, 195, 252, 30, 68, 177, 223, 180, 245, 58, 47, 222, 79, 205, 14, 50, 187, 156, 91, 94, 220, 194, 92, 111, 213, 140, 126, 255, 102, 169, 223, 194, 197, 53, 24, 57, 202, 254, 47, 35, 153, 162, 5, 88, 24, 129, 240, 6, 135, 61, 161, 8, 155, 103, 17, 21, 48, 124, 25, 74, 105, 218, 19, 225, 13, 20, 199, 66, 229, 97, 0, 185, 152, 175, 64, 178, 62, 126, 21, 228, 7, 120, 20, 201, 18, 113, 35, 228, 15, 200, 187, 41, 82, 218, 230, 81, 46, 124, 134, 228, 173, 95, 0, 61, 103, 104, 43, 54, 64, 198, 174, 151, 32, 45, 234, 93, 200, 111, 80, 73, 157, 227, 114, 96, 95, 72, 75, 249, 26, 233, 99, 45, 129, 16, 1, 156, 4, 37, 21, 250, 240, 33, 100, 176, 25, 138, 120, 152, 210, 165, 144, 122, 119, 81, 224, 218, 39, 34, 50, 154, 140, 128, 162, 95, 135, 32, 12, 54, 31, 238, 194, 132, 227, 141, 144, 111, 254, 101, 72, 229, 188, 2, 209, 139, 62, 26, 233, 181, 242, 179, 10, 62, 17, 233, 169, 218, 173, 17, 78, 175, 218, 3, 138, 11, 120, 0, 138, 136, 58, 23, 218, 38, 38, 41, 81, 182, 86, 240, 150, 25, 203, 26, 80, 14, 68, 254, 248, 204, 0, 155, 240, 247, 8, 168, 4, 123, 48, 18, 110, 26, 82, 88, 251, 16, 74, 21, 250, 103, 202, 181, 182, 166, 150, 159, 33, 212, 222, 4, 223, 81, 62, 255, 141, 41, 89, 228, 138, 192, 57, 135, 49, 95, 202, 214, 117, 212, 86, 43, 161, 99, 109, 12, 235, 60, 52, 112, 236, 17, 131, 121, 222, 197, 126, 212, 82, 51, 135, 74, 65, 251, 35, 227, 50, 137, 139, 237, 169, 101, 117, 45, 243, 123, 11, 74, 35, 72, 186, 118, 39, 243, 172, 151, 80, 194, 106, 82, 58, 24, 25, 112, 6, 89, 220, 129, 146, 56, 231, 155, 155, 175, 159, 114, 195, 106, 225, 104, 202, 137, 177, 136, 178, 69, 164, 213, 179, 217, 154, 170, 103, 104, 127, 111, 194, 168, 16, 210, 107, 140, 111, 178, 176, 41, 37, 241, 127, 68, 242, 156, 28, 227, 24, 97, 94, 218, 85, 20, 241, 187, 234, 98, 71, 115, 143, 99, 3, 231, 125, 64, 105, 45, 89, 215, 63, 135, 18, 110, 71, 81, 186, 248, 230, 148, 45, 224, 21, 134, 61, 170, 231, 83, 251, 255, 116, 49, 248, 33, 85, 198, 54, 233, 250, 15, 154, 247, 247, 75, 146, 231, 177, 32, 1, 180, 162, 140, 65, 63, 152, 139, 144, 210, 107, 93, 138, 107, 160, 140, 28, 73, 152, 123, 147, 34, 15, 55, 162, 42, 126, 253, 156, 229, 69, 217, 180, 98, 184, 72, 210, 57, 148, 100, 61, 131, 50, 163, 102, 93, 167, 35, 69, 244, 223, 82, 220, 196, 85, 43, 151, 51, 239, 228, 196, 192, 121, 255, 165, 102, 114, 218, 181, 135, 82, 42, 179, 157, 80, 43, 82, 198, 159, 246, 20, 183, 245, 43, 125, 13, 54, 223, 194, 238, 224, 114, 3, 165, 198, 134, 146, 97, 45, 126, 70, 242, 90, 106, 82, 60, 198, 130, 4, 96, 45, 89, 91, 83, 170, 221, 92, 243, 49, 220, 143, 106, 11, 71, 39, 65, 18, 43, 91, 146, 216, 72, 177, 246, 183, 115, 244, 61, 131, 138, 96, 10, 205, 198, 30, 230, 25, 93, 183, 178, 141, 20, 10, 129, 207, 57, 175, 166, 12, 51, 13, 212, 199, 156, 71, 125, 176, 131, 40, 110, 51, 155, 241, 119, 125, 19, 229, 54, 7, 53, 185, 200, 210, 200, 37, 31, 71, 145, 124, 157, 90, 198, 246, 165, 220, 195, 161, 126, 135, 209, 91, 134, 97, 78, 180, 107, 239, 129, 230, 119, 232, 228, 85, 3, 120, 132, 25, 96, 136, 0, 122, 81, 84, 249, 44, 101, 248, 216, 54, 199, 135, 168, 54, 238, 101, 198, 151, 21, 152, 113, 27, 201, 59, 18, 142, 245, 49, 215, 112, 109, 19, 29, 168, 15, 61, 147, 170, 2, 190, 190, 131, 126, 41, 218, 23, 41, 238, 177, 3, 197, 97, 172, 74, 218, 158, 178, 127, 144, 241, 184, 139, 193, 148, 209, 106, 103, 243, 59, 139, 3, 180, 162, 140, 90, 62, 230, 178, 205, 52, 66, 97, 95, 86, 237, 234, 139, 228, 10, 24, 31, 5, 48, 169, 4, 153, 77, 142, 124, 7, 138, 141, 191, 8, 210, 8, 154, 59, 78, 222, 106, 43, 89, 249, 15, 77, 72, 118, 130, 217, 36, 217, 182, 78, 219, 119, 80, 120, 252, 66, 40, 214, 225, 5, 7, 253, 212, 245, 110, 80, 156, 197, 32, 40, 68, 206, 134, 219, 205, 117, 254, 119, 85, 208, 233, 80, 68, 246, 229, 144, 26, 123, 20, 164, 85, 140, 79, 24, 95, 79, 200, 85, 237, 227, 232, 132, 254, 49, 104, 130, 116, 96, 27, 211, 31, 218, 12, 42, 13, 102, 64, 106, 160, 159, 6, 117, 53, 228, 57, 60, 14, 138, 187, 223, 6, 242, 81, 63, 8, 5, 61, 248, 117, 109, 86, 67, 92, 183, 255, 14, 241, 228, 142, 78, 208, 6, 10, 155, 64, 58, 253, 4, 196, 119, 199, 168, 37, 124, 1, 229, 239, 249, 241, 131, 121, 225, 91, 68, 187, 118, 244, 129, 8, 201, 190, 175, 229, 157, 62, 46, 140, 131, 98, 7, 122, 64, 33, 245, 7, 66, 149, 78, 66, 240, 62, 162, 138, 97, 46, 164, 135, 131, 27, 104, 130, 162, 103, 142, 128, 2, 20, 250, 34, 170, 245, 211, 58, 199, 69, 166, 163, 180, 230, 238, 114, 208, 224, 31, 134, 8, 224, 77, 40, 88, 228, 91, 72, 143, 223, 18, 165, 4, 176, 13, 226, 91, 168, 191, 3, 233, 213, 22, 166, 64, 177, 238, 151, 66, 65, 26, 255, 48, 127, 179, 138, 52, 219, 52, 175, 182, 72, 175, 81, 20, 202, 107, 176, 48, 27, 165, 37, 102, 150, 133, 34, 123, 90, 67, 28, 212, 79, 51, 123, 5, 81, 173, 229, 23, 32, 219, 199, 225, 80, 22, 246, 43, 208, 71, 251, 11, 228, 126, 159, 135, 210, 8, 163, 185, 144, 113, 205, 194, 131, 6, 67, 64, 164, 87, 93, 75, 7, 202, 174, 252, 28, 165, 138, 45, 32, 249, 20, 21, 119, 63, 190, 204, 117, 183, 11, 21, 15, 8, 42, 208, 225, 98, 106, 247, 13, 80, 186, 122, 72, 159, 78, 195, 126, 102, 157, 116, 183, 82, 157, 193, 210, 32, 146, 16, 174, 110, 206, 245, 61, 144, 46, 174, 76, 217, 32, 126, 87, 96, 76, 105, 66, 32, 25, 47, 153, 179, 29, 37, 213, 247, 163, 244, 245, 109, 169, 96, 150, 101, 41, 97, 237, 175, 101, 190, 231, 170, 160, 253, 167, 13, 37, 61, 146, 228, 36, 202, 65, 146, 20, 225, 147, 7, 31, 165, 132, 158, 123, 40, 189, 247, 49, 74, 195, 120, 155, 197, 3, 49, 109, 116, 171, 117, 151, 54, 80, 254, 241, 19, 114, 158, 111, 163, 142, 95, 101, 220, 231, 222, 141, 114, 199, 206, 161, 226, 15, 202, 117, 176, 228, 193, 59, 41, 149, 239, 103, 102, 252, 43, 80, 54, 135, 79, 41, 2, 92, 226, 4, 0, 146, 235, 154, 23, 21, 146, 30, 71, 81, 193, 6, 47, 81, 210, 242, 90, 25, 23, 94, 195, 188, 212, 211, 41, 143, 219, 238, 148, 118, 113, 120, 198, 121, 33, 108, 164, 44, 104, 47, 80, 161, 86, 55, 80, 28, 166, 200, 139, 91, 143, 34, 240, 245, 156, 182, 246, 20, 103, 216, 145, 197, 98, 26, 202, 193, 182, 148, 190, 255, 13, 197, 13, 22, 81, 154, 145, 159, 177, 148, 132, 135, 82, 22, 190, 80, 220, 198, 118, 36, 239, 99, 54, 7, 91, 203, 60, 111, 204, 149, 236, 118, 216, 137, 162, 200, 208, 201, 219, 147, 60, 128, 50, 103, 126, 200, 104, 195, 168, 52, 236, 78, 89, 180, 238, 163, 244, 113, 63, 189, 170, 8, 118, 163, 150, 164, 187, 168, 212, 180, 222, 53, 254, 96, 181, 194, 214, 148, 26, 216, 177, 192, 57, 71, 80, 17, 70, 187, 123, 237, 77, 212, 164, 252, 142, 226, 98, 127, 201, 184, 206, 67, 20, 196, 136, 200, 237, 48, 154, 233, 161, 97, 93, 41, 46, 241, 31, 102, 151, 59, 47, 130, 61, 72, 222, 76, 89, 213, 170, 233, 135, 168, 22, 182, 163, 150, 155, 23, 89, 90, 14, 111, 87, 146, 183, 50, 221, 74, 87, 9, 54, 81, 46, 248, 222, 9, 199, 247, 161, 226, 21, 94, 96, 54, 1, 252, 146, 146, 55, 98, 230, 118, 183, 195, 50, 76, 247, 121, 223, 71, 193, 124, 146, 191, 170, 226, 67, 78, 165, 8, 111, 24, 21, 51, 184, 152, 249, 67, 160, 154, 3, 39, 82, 50, 205, 124, 198, 101, 136, 229, 41, 67, 208, 210, 64, 176, 121, 8, 160, 19, 3, 27, 123, 23, 189, 81, 123, 74, 168, 90, 196, 120, 248, 83, 185, 179, 100, 5, 10, 182, 112, 218, 62, 165, 98, 14, 237, 239, 126, 148, 86, 242, 140, 185, 86, 158, 107, 183, 163, 156, 52, 15, 51, 57, 150, 47, 47, 90, 118, 61, 135, 113, 2, 152, 76, 5, 177, 100, 157, 223, 154, 50, 7, 223, 203, 108, 217, 169, 150, 4, 176, 63, 69, 176, 177, 246, 188, 37, 98, 54, 129, 246, 14, 216, 10, 74, 122, 156, 133, 120, 33, 133, 203, 160, 32, 132, 1, 136, 111, 132, 176, 60, 228, 167, 191, 23, 10, 175, 246, 193, 250, 243, 173, 165, 174, 17, 178, 188, 185, 214, 180, 207, 161, 176, 243, 121, 136, 151, 107, 79, 187, 246, 60, 68, 123, 25, 60, 2, 249, 201, 203, 133, 144, 253, 96, 71, 232, 121, 179, 18, 68, 154, 160, 140, 157, 33, 80, 177, 234, 215, 43, 24, 71, 8, 246, 64, 100, 41, 28, 96, 254, 239, 147, 208, 183, 51, 66, 49, 13, 57, 41, 236, 106, 202, 187, 246, 22, 101, 55, 95, 183, 138, 179, 228, 69, 51, 187, 119, 160, 182, 54, 251, 150, 218, 234, 196, 237, 243, 62, 197, 117, 206, 42, 120, 237, 106, 162, 125, 182, 206, 212, 118, 53, 89, 187, 150, 22, 193, 6, 74, 200, 125, 149, 242, 159, 244, 164, 124, 1, 89, 254, 147, 73, 148, 221, 198, 197, 141, 189, 62, 59, 80, 106, 51, 41, 13, 36, 118, 141, 90, 189, 36, 80, 234, 213, 183, 204, 150, 216, 251, 82, 66, 224, 27, 20, 155, 252, 105, 160, 79, 71, 202, 160, 180, 136, 98, 169, 121, 175, 125, 160, 185, 110, 90, 160, 73, 81, 188, 154, 228, 227, 204, 231, 190, 206, 123, 255, 222, 166, 207, 72, 106, 130, 45, 162, 216, 245, 70, 21, 142, 117, 5, 74, 75, 152, 76, 77, 170, 18, 167, 88, 173, 8, 32, 239, 44, 201, 227, 201, 218, 146, 146, 11, 230, 81, 65, 17, 69, 102, 224, 227, 140, 2, 77, 43, 149, 5, 64, 197, 45, 124, 207, 252, 161, 240, 229, 222, 191, 61, 69, 232, 149, 142, 215, 6, 197, 38, 230, 88, 84, 155, 0, 44, 230, 157, 37, 125, 24, 6, 119, 199, 172, 70, 202, 232, 99, 169, 55, 239, 181, 87, 166, 52, 138, 223, 80, 172, 175, 146, 205, 152, 65, 105, 73, 111, 83, 249, 141, 237, 40, 31, 255, 63, 153, 108, 204, 41, 231, 254, 213, 230, 88, 182, 210, 203, 41, 73, 125, 236, 63, 213, 148, 154, 139, 204, 146, 6, 115, 111, 31, 147, 18, 61, 138, 92, 251, 104, 42, 184, 165, 35, 101, 184, 154, 94, 225, 115, 93, 76, 197, 54, 216, 218, 3, 255, 54, 47, 55, 41, 116, 174, 156, 251, 151, 195, 49, 178, 180, 140, 59, 41, 31, 207, 81, 12, 24, 160, 220, 31, 109, 169, 60, 191, 79, 114, 190, 224, 16, 186, 179, 100, 103, 42, 66, 229, 81, 230, 11, 203, 42, 114, 237, 60, 51, 112, 42, 85, 248, 10, 84, 194, 9, 89, 190, 127, 99, 168, 249, 152, 235, 82, 62, 137, 175, 25, 109, 2, 153, 68, 0, 69, 239, 95, 14, 199, 104, 162, 100, 134, 233, 76, 14, 184, 237, 64, 217, 50, 126, 48, 215, 127, 196, 61, 94, 233, 71, 73, 155, 37, 191, 160, 164, 216, 201, 254, 77, 171, 112, 237, 172, 25, 216, 131, 18, 164, 172, 145, 102, 21, 243, 240, 126, 169, 152, 60, 216, 134, 10, 222, 180, 26, 200, 37, 212, 140, 250, 210, 220, 255, 253, 42, 221, 191, 218, 28, 203, 199, 229, 40, 191, 193, 206, 110, 187, 253, 103, 43, 106, 237, 241, 241, 222, 2, 55, 112, 103, 137, 109, 91, 137, 114, 32, 229, 137, 204, 205, 123, 237, 60, 51, 240, 104, 42, 172, 202, 245, 240, 61, 67, 17, 77, 209, 123, 159, 73, 169, 103, 214, 216, 212, 201, 60, 151, 93, 95, 67, 37, 91, 202, 185, 127, 17, 142, 81, 141, 239, 5, 50, 42, 17, 179, 44, 180, 75, 216, 88, 196, 55, 102, 204, 218, 64, 218, 66, 27, 0, 127, 134, 234, 252, 191, 100, 218, 134, 65, 121, 237, 127, 131, 138, 35, 135, 96, 34, 20, 249, 51, 9, 50, 214, 92, 8, 25, 76, 220, 234, 227, 254, 181, 47, 129, 34, 96, 108, 9, 212, 187, 16, 175, 188, 1, 168, 88, 243, 60, 196, 115, 228, 187, 67, 1, 47, 189, 145, 111, 255, 65, 11, 227, 12, 90, 248, 214, 224, 127, 145, 156, 76, 82, 244, 254, 61, 160, 170, 103, 214, 208, 53, 5, 218, 187, 104, 55, 168, 92, 143, 15, 149, 126, 175, 8, 12, 37, 216, 162, 73, 37, 182, 226, 50, 103, 9, 168, 88, 0, 11, 161, 228, 140, 6, 42, 176, 195, 134, 85, 111, 74, 205, 108, 223, 107, 88, 116, 6, 90, 246, 251, 24, 229, 58, 182, 56, 217, 244, 63, 142, 229, 61, 99, 94, 44, 231, 254, 69, 57, 70, 165, 223, 235, 71, 172, 250, 5, 151, 2, 60, 138, 90, 111, 67, 241, 2, 175, 146, 124, 50, 208, 94, 142, 22, 148, 36, 125, 151, 115, 255, 169, 212, 36, 153, 226, 160, 181, 222, 245, 14, 244, 175, 218, 247, 242, 125, 1, 67, 161, 28, 62, 139, 107, 23, 102, 41, 249, 97, 43, 40, 22, 206, 199, 123, 43, 188, 238, 238, 80, 33, 196, 80, 49, 231, 219, 161, 165, 105, 21, 175, 189, 168, 239, 32, 205, 198, 95, 244, 254, 150, 253, 63, 7, 249, 29, 44, 218, 98, 142, 187, 166, 140, 163, 242, 239, 229, 81, 148, 15, 126, 218, 119, 185, 54, 235, 52, 54, 118, 10, 201, 131, 29, 220, 205, 235, 87, 77, 27, 197, 210, 136, 229, 112, 140, 188, 223, 43, 19, 253, 120, 249, 213, 17, 237, 5, 16, 130, 94, 208, 166, 71, 99, 0, 252, 26, 218, 17, 116, 54, 226, 17, 188, 69, 225, 214, 140, 123, 218, 217, 121, 49, 52, 59, 71, 32, 121, 187, 212, 114, 225, 52, 40, 197, 218, 135, 217, 136, 151, 197, 203, 219, 175, 8, 100, 113, 140, 211, 32, 142, 241, 113, 224, 120, 214, 247, 202, 132, 34, 27, 70, 0, 146, 94, 183, 49, 255, 255, 3, 146, 198, 23, 34, 103, 12, 122, 5, 48, 31, 170, 213, 123, 100, 86, 71, 7, 90, 67, 201, 21, 171, 64, 181, 11, 210, 92, 177, 15, 65, 82, 125, 71, 72, 203, 248, 27, 68, 108, 126, 184, 117, 222, 126, 22, 246, 132, 82, 215, 95, 132, 150, 138, 208, 54, 47, 73, 241, 254, 128, 54, 148, 58, 61, 229, 120, 229, 224, 177, 148, 52, 161, 162, 21, 165, 107, 190, 194, 120, 48, 136, 109, 223, 37, 47, 219, 241, 238, 185, 15, 149, 157, 107, 113, 237, 64, 223, 145, 84, 252, 219, 92, 202, 45, 125, 53, 211, 163, 120, 243, 88, 200, 66, 216, 221, 140, 41, 203, 209, 148, 167, 223, 97, 84, 152, 219, 190, 148, 69, 244, 127, 89, 189, 138, 227, 85, 19, 2, 125, 14, 176, 17, 226, 1, 5, 110, 134, 142, 221, 81, 28, 16, 53, 159, 234, 181, 151, 91, 183, 239, 6, 239, 247, 205, 80, 233, 84, 11, 187, 65, 37, 79, 111, 131, 150, 129, 62, 230, 222, 27, 66, 27, 92, 132, 2, 77, 22, 154, 243, 150, 36, 92, 137, 40, 161, 196, 127, 70, 23, 26, 160, 125, 19, 119, 130, 170, 155, 142, 131, 118, 88, 89, 128, 108, 129, 56, 237, 123, 229, 3, 143, 162, 124, 120, 195, 155, 85, 164, 194, 143, 102, 51, 138, 31, 180, 237, 163, 106, 64, 197, 173, 41, 87, 176, 111, 225, 218, 217, 156, 123, 112, 224, 156, 162, 220, 162, 86, 28, 32, 239, 56, 122, 179, 120, 44, 64, 158, 239, 149, 11, 139, 116, 182, 31, 250, 24, 202, 35, 119, 162, 215, 94, 11, 2, 216, 210, 244, 217, 217, 107, 111, 101, 94, 234, 148, 192, 53, 23, 83, 142, 162, 221, 169, 56, 197, 175, 168, 168, 163, 60, 145, 187, 213, 34, 128, 74, 198, 81, 173, 88, 128, 92, 88, 116, 219, 56, 64, 241, 128, 215, 65, 217, 167, 109, 51, 250, 86, 10, 235, 153, 191, 126, 14, 224, 34, 40, 199, 110, 117, 167, 173, 53, 100, 62, 253, 39, 20, 43, 119, 43, 100, 62, 30, 5, 229, 241, 237, 95, 203, 129, 86, 56, 142, 145, 16, 235, 158, 11, 9, 218, 151, 163, 153, 234, 12, 149, 67, 0, 128, 108, 246, 43, 160, 178, 157, 62, 45, 108, 4, 21, 165, 178, 232, 170, 83, 105, 85, 190, 102, 34, 190, 129, 213, 8, 104, 55, 145, 137, 94, 63, 91, 174, 126, 123, 52, 15, 20, 29, 199, 110, 80, 69, 242, 15, 33, 226, 184, 0, 82, 13, 31, 66, 233, 254, 205, 237, 160, 0, 220, 135, 17, 201, 99, 73, 208, 11, 146, 155, 38, 33, 156, 61, 12, 160, 124, 2, 120, 11, 210, 81, 79, 168, 224, 26, 22, 108, 149, 45, 139, 147, 156, 99, 86, 189, 10, 237, 51, 208, 5, 241, 180, 234, 34, 220, 162, 150, 80, 75, 174, 85, 196, 98, 249, 1, 84, 147, 97, 93, 200, 97, 22, 36, 130, 74, 62, 222, 185, 208, 222, 56, 59, 148, 121, 254, 109, 8, 239, 200, 57, 192, 233, 99, 189, 130, 253, 189, 115, 109, 63, 119, 3, 136, 34, 220, 194, 135, 53, 33, 238, 51, 60, 225, 119, 145, 126, 181, 230, 90, 214, 38, 178, 50, 178, 13, 98, 239, 64, 28, 246, 34, 36, 44, 41, 149, 16, 192, 243, 80, 206, 250, 177, 21, 92, 35, 11, 30, 129, 42, 119, 236, 227, 181, 111, 13, 85, 198, 152, 226, 180, 21, 225, 22, 62, 28, 13, 113, 31, 187, 99, 199, 81, 230, 247, 29, 101, 244, 171, 21, 215, 234, 14, 249, 74, 118, 241, 250, 182, 49, 237, 254, 6, 31, 128, 38, 201, 94, 230, 62, 91, 34, 144, 51, 80, 41, 251, 62, 23, 42, 44, 145, 5, 173, 161, 170, 33, 247, 2, 88, 171, 192, 245, 63, 129, 98, 1, 14, 129, 202, 203, 172, 3, 213, 218, 191, 17, 50, 159, 222, 226, 244, 45, 194, 45, 124, 72, 218, 35, 216, 159, 53, 121, 250, 213, 138, 107, 53, 33, 108, 111, 105, 52, 237, 126, 165, 211, 13, 160, 165, 226, 44, 232, 157, 141, 135, 138, 117, 236, 225, 159, 92, 9, 60, 4, 149, 142, 77, 131, 74, 179, 99, 142, 134, 2, 43, 198, 65, 101, 90, 110, 129, 56, 195, 182, 136, 182, 137, 3, 138, 113, 139, 90, 66, 115, 113, 173, 44, 120, 27, 81, 0, 202, 48, 243, 119, 26, 180, 127, 82, 4, 205, 165, 111, 86, 1, 109, 85, 173, 180, 4, 214, 137, 84, 96, 197, 41, 36, 215, 161, 50, 98, 191, 164, 10, 65, 36, 69, 26, 239, 73, 37, 167, 254, 137, 233, 101, 216, 39, 50, 138, 241, 91, 131, 10, 223, 234, 91, 225, 56, 246, 161, 192, 207, 230, 105, 160, 138, 80, 222, 236, 180, 173, 100, 250, 142, 242, 250, 218, 18, 126, 99, 152, 60, 118, 139, 167, 82, 241, 140, 63, 182, 213, 234, 99, 117, 103, 216, 63, 208, 134, 181, 77, 1, 111, 75, 85, 253, 158, 103, 94, 202, 66, 202, 186, 182, 92, 66, 255, 188, 246, 250, 188, 209, 75, 69, 199, 97, 203, 197, 95, 238, 181, 111, 99, 206, 219, 219, 105, 43, 74, 0, 141, 84, 65, 136, 135, 168, 148, 254, 143, 204, 152, 99, 59, 182, 132, 6, 95, 141, 108, 214, 106, 80, 107, 37, 152, 135, 91, 52, 7, 86, 147, 107, 21, 125, 167, 227, 168, 80, 240, 19, 40, 14, 51, 132, 202, 189, 140, 17, 128, 47, 3, 212, 58, 155, 181, 185, 96, 46, 36, 140, 37, 173, 161, 69, 36, 234, 114, 164, 239, 188, 227, 0, 242, 203, 56, 69, 193, 26, 152, 46, 0, 240, 47, 72, 86, 43, 201, 116, 246, 189, 129, 75, 131, 23, 13, 0, 14, 133, 198, 49, 1, 50, 98, 84, 27, 138, 72, 212, 69, 165, 239, 162, 48, 31, 42, 163, 63, 26, 178, 9, 204, 68, 152, 96, 108, 204, 133, 111, 29, 180, 230, 120, 191, 86, 227, 87, 144, 17, 104, 0, 228, 89, 60, 2, 1, 149, 189, 17, 114, 85, 62, 11, 21, 99, 244, 97, 44, 164, 143, 250, 155, 72, 215, 18, 142, 128, 66, 161, 39, 162, 54, 31, 127, 105, 133, 44, 110, 241, 37, 52, 131, 125, 53, 122, 176, 249, 59, 195, 107, 31, 3, 17, 239, 235, 144, 229, 118, 160, 105, 139, 65, 35, 244, 162, 55, 64, 124, 199, 109, 64, 193, 138, 167, 2, 152, 138, 112, 184, 82, 45, 160, 9, 26, 236, 122, 144, 89, 52, 9, 134, 66, 6, 152, 19, 155, 99, 80, 101, 192, 65, 16, 241, 142, 133, 76, 176, 131, 81, 186, 179, 106, 57, 112, 19, 148, 59, 176, 31, 84, 89, 117, 4, 196, 37, 159, 69, 105, 33, 201, 167, 33, 213, 111, 85, 104, 25, 27, 9, 21, 218, 140, 113, 253, 70, 232, 3, 223, 1, 85, 245, 92, 201, 57, 54, 14, 98, 59, 110, 82, 68, 45, 97, 0, 164, 59, 175, 15, 85, 35, 233, 147, 208, 111, 40, 100, 80, 122, 26, 98, 105, 103, 54, 199, 224, 10, 64, 31, 200, 104, 245, 4, 244, 60, 31, 3, 120, 18, 113, 19, 119, 185, 112, 18, 128, 251, 32, 127, 201, 219, 144, 83, 232, 93, 72, 62, 9, 213, 58, 166, 185, 127, 82, 77, 231, 31, 169, 225, 68, 200, 238, 124, 6, 180, 30, 245, 135, 130, 62, 79, 69, 60, 243, 36, 47, 20, 93, 175, 54, 128, 168, 248, 3, 168, 208, 113, 31, 104, 109, 221, 7, 113, 107, 31, 32, 162, 221, 28, 202, 18, 154, 0, 17, 76, 7, 36, 151, 122, 109, 110, 120, 15, 42, 12, 61, 15, 138, 96, 250, 9, 244, 14, 223, 75, 232, 191, 2, 20, 13, 244, 60, 178, 75, 223, 206, 134, 100, 163, 142, 80, 253, 225, 47, 81, 78, 54, 144, 3, 86, 11, 120, 27, 242, 74, 253, 26, 250, 248, 103, 65, 238, 73, 127, 179, 231, 188, 80, 116, 189, 202, 103, 181, 18, 204, 54, 215, 57, 17, 146, 148, 223, 192, 210, 243, 241, 45, 244, 129, 182, 195, 61, 30, 34, 134, 36, 104, 128, 56, 112, 79, 40, 192, 116, 195, 156, 215, 159, 3, 189, 179, 138, 62, 62, 128, 152, 29, 160, 11, 201, 47, 168, 116, 238, 69, 212, 190, 60, 149, 232, 192, 19, 169, 50, 46, 251, 81, 41, 220, 35, 168, 128, 210, 127, 51, 223, 14, 35, 37, 86, 43, 42, 49, 148, 84, 70, 238, 83, 148, 17, 231, 135, 50, 198, 106, 119, 1, 241, 107, 8, 119, 54, 237, 71, 151, 217, 183, 232, 24, 59, 82, 58, 127, 7, 146, 215, 48, 218, 79, 176, 217, 208, 111, 176, 27, 64, 36, 109, 160, 84, 4, 187, 82, 214, 175, 133, 230, 154, 139, 169, 157, 51, 67, 123, 248, 229, 178, 90, 81, 68, 218, 199, 249, 221, 150, 74, 171, 10, 237, 148, 157, 133, 223, 82, 169, 222, 110, 219, 8, 51, 214, 173, 42, 232, 91, 116, 140, 39, 83, 213, 87, 255, 193, 202, 55, 224, 172, 152, 0, 108, 172, 155, 79, 213, 149, 96, 71, 42, 205, 57, 109, 91, 153, 113, 204, 97, 181, 74, 192, 16, 167, 200, 131, 69, 56, 84, 45, 184, 25, 168, 157, 66, 14, 160, 226, 43, 15, 98, 184, 144, 118, 47, 106, 34, 77, 98, 233, 110, 36, 89, 152, 86, 99, 56, 149, 0, 170, 89, 2, 45, 15, 190, 204, 210, 0, 207, 115, 88, 74, 0, 121, 57, 69, 30, 44, 194, 161, 106, 193, 205, 138, 44, 21, 171, 81, 37, 253, 239, 103, 126, 34, 72, 170, 49, 188, 84, 18, 192, 227, 84, 54, 236, 0, 243, 176, 23, 154, 151, 225, 191, 180, 113, 44, 159, 83, 36, 97, 30, 14, 85, 164, 111, 222, 49, 22, 93, 42, 218, 82, 213, 190, 122, 230, 24, 103, 86, 141, 225, 31, 177, 210, 120, 128, 106, 65, 46, 171, 21, 114, 218, 183, 11, 66, 17, 137, 58, 79, 223, 188, 99, 252, 10, 113, 213, 112, 62, 164, 227, 251, 129, 36, 22, 134, 66, 1, 49, 35, 145, 109, 153, 221, 8, 210, 62, 182, 206, 236, 91, 230, 172, 169, 100, 93, 74, 194, 6, 170, 150, 78, 218, 230, 145, 121, 57, 197, 146, 196, 188, 99, 204, 187, 84, 52, 81, 249, 5, 223, 81, 235, 249, 155, 166, 223, 246, 9, 51, 63, 111, 95, 144, 149, 197, 3, 148, 179, 46, 85, 138, 67, 25, 237, 22, 186, 152, 146, 156, 143, 13, 188, 180, 37, 137, 121, 199, 56, 142, 249, 150, 138, 195, 168, 236, 162, 129, 140, 8, 231, 6, 74, 102, 240, 181, 134, 34, 125, 83, 9, 32, 83, 122, 52, 88, 100, 93, 170, 22, 230, 225, 20, 238, 199, 120, 128, 225, 93, 63, 93, 92, 197, 124, 168, 51, 205, 245, 215, 164, 124, 243, 181, 28, 99, 94, 193, 119, 6, 201, 235, 189, 182, 97, 20, 248, 149, 217, 139, 244, 5, 89, 154, 28, 10, 200, 27, 55, 30, 170, 132, 157, 228, 141, 91, 9, 241, 157, 178, 86, 132, 44, 135, 205, 1, 214, 190, 157, 5, 214, 103, 112, 5, 228, 51, 232, 128, 100, 191, 198, 79, 160, 234, 227, 167, 67, 110, 217, 14, 230, 255, 87, 106, 56, 198, 60, 238, 218, 70, 40, 50, 184, 51, 180, 251, 152, 5, 107, 82, 239, 94, 102, 223, 31, 161, 129, 140, 237, 172, 222, 4, 237, 239, 55, 3, 233, 149, 180, 54, 135, 162, 124, 1, 153, 49, 111, 66, 122, 150, 208, 65, 136, 178, 95, 47, 129, 30, 154, 222, 64, 171, 13, 63, 131, 76, 196, 47, 65, 4, 187, 62, 128, 199, 17, 54, 27, 127, 12, 217, 225, 187, 65, 132, 51, 24, 229, 127, 252, 188, 48, 20, 242, 120, 246, 132, 222, 197, 125, 80, 130, 200, 69, 136, 123, 236, 190, 129, 246, 72, 252, 75, 224, 26, 207, 65, 190, 147, 114, 250, 2, 136, 8, 192, 159, 209, 239, 33, 59, 218, 215, 194, 43, 166, 239, 168, 132, 227, 125, 32, 215, 237, 68, 211, 167, 7, 228, 34, 61, 16, 192, 228, 156, 247, 40, 10, 229, 60, 207, 79, 33, 194, 62, 7, 138, 118, 222, 170, 38, 35, 139, 67, 3, 36, 165, 207, 69, 178, 199, 238, 121, 0, 95, 155, 177, 101, 65, 145, 190, 2, 179, 22, 108, 78, 237, 5, 240, 22, 181, 53, 202, 95, 10, 172, 119, 175, 228, 232, 111, 11, 61, 183, 162, 10, 60, 246, 73, 232, 87, 45, 237, 162, 200, 243, 180, 37, 121, 59, 37, 176, 189, 102, 206, 33, 85, 146, 62, 235, 62, 121, 101, 165, 74, 240, 80, 51, 158, 75, 41, 217, 164, 11, 101, 139, 8, 173, 233, 69, 250, 130, 12, 11, 129, 121, 62, 104, 145, 254, 195, 40, 171, 87, 43, 42, 74, 120, 52, 201, 225, 41, 253, 171, 173, 93, 100, 141, 111, 44, 181, 157, 219, 38, 78, 219, 84, 170, 78, 95, 218, 117, 115, 89, 218, 170, 132, 99, 24, 21, 145, 182, 240, 124, 21, 250, 54, 11, 1, 220, 70, 109, 247, 246, 24, 85, 236, 97, 134, 25, 212, 111, 83, 206, 169, 166, 118, 145, 54, 190, 86, 212, 174, 161, 190, 163, 231, 32, 51, 198, 62, 9, 231, 229, 182, 180, 49, 191, 38, 146, 133, 141, 230, 125, 244, 102, 182, 211, 40, 119, 223, 230, 178, 4, 238, 8, 105, 9, 189, 161, 64, 202, 41, 80, 4, 82, 8, 26, 33, 65, 116, 16, 228, 239, 239, 91, 195, 113, 245, 2, 208, 21, 165, 242, 129, 45, 119, 59, 48, 112, 78, 35, 148, 103, 183, 46, 84, 48, 43, 109, 124, 213, 140, 94, 90, 12, 189, 195, 247, 145, 29, 255, 144, 187, 111, 185, 4, 208, 11, 10, 29, 31, 2, 229, 172, 47, 231, 252, 110, 29, 232, 63, 3, 18, 0, 109, 61, 159, 199, 161, 88, 53, 95, 13, 237, 14, 189, 172, 59, 160, 28, 249, 63, 64, 25, 176, 135, 151, 57, 206, 44, 176, 145, 75, 126, 161, 11, 91, 3, 216, 15, 203, 46, 58, 62, 27, 189, 116, 26, 20, 245, 52, 13, 233, 89, 202, 205, 14, 229, 18, 192, 137, 0, 254, 109, 176, 31, 20, 78, 102, 127, 175, 24, 232, 63, 19, 241, 18, 105, 11, 160, 151, 236, 19, 192, 249, 144, 84, 60, 8, 154, 61, 171, 64, 105, 228, 151, 33, 190, 189, 124, 181, 224, 99, 200, 78, 239, 167, 129, 111, 2, 205, 34, 127, 103, 244, 162, 227, 123, 218, 244, 25, 3, 169, 193, 51, 176, 180, 69, 47, 153, 181, 160, 23, 101, 138, 28, 66, 73, 193, 127, 119, 126, 87, 90, 175, 230, 54, 150, 238, 72, 122, 148, 89, 99, 221, 77, 140, 186, 82, 145, 72, 254, 90, 185, 138, 233, 155, 38, 51, 248, 88, 228, 121, 198, 83, 38, 217, 99, 168, 44, 158, 221, 41, 185, 224, 6, 175, 95, 209, 241, 117, 167, 226, 5, 230, 82, 89, 62, 95, 152, 251, 36, 237, 159, 124, 16, 37, 43, 141, 165, 132, 223, 193, 76, 222, 140, 98, 44, 35, 183, 241, 106, 212, 174, 236, 43, 150, 243, 125, 236, 63, 118, 135, 237, 16, 132, 124, 222, 181, 32, 128, 33, 166, 205, 143, 176, 1, 37, 109, 95, 92, 224, 158, 69, 158, 167, 45, 149, 243, 183, 192, 28, 95, 72, 109, 177, 234, 231, 8, 22, 29, 223, 181, 212, 230, 86, 182, 8, 86, 27, 146, 55, 81, 68, 224, 239, 114, 210, 135, 114, 220, 156, 64, 149, 135, 157, 69, 17, 206, 94, 129, 123, 53, 154, 251, 61, 192, 136, 112, 72, 109, 6, 81, 54, 1, 148, 131, 3, 40, 202, 62, 32, 163, 95, 94, 2, 24, 108, 218, 252, 132, 210, 6, 243, 50, 126, 95, 193, 88, 243, 96, 71, 243, 33, 146, 170, 120, 21, 25, 95, 57, 220, 44, 175, 173, 4, 84, 73, 250, 101, 157, 251, 23, 41, 134, 25, 195, 74, 180, 128, 33, 80, 20, 235, 54, 89, 29, 115, 194, 155, 144, 80, 54, 194, 107, 31, 14, 9, 154, 79, 86, 233, 62, 73, 48, 7, 178, 24, 134, 10, 79, 2, 197, 198, 215, 15, 146, 175, 124, 83, 247, 199, 144, 165, 174, 87, 224, 250, 11, 32, 95, 255, 104, 200, 55, 145, 180, 25, 5, 0, 124, 6, 85, 24, 31, 3, 21, 207, 8, 149, 160, 205, 7, 134, 18, 202, 177, 192, 53, 80, 251, 210, 229, 137, 164, 201, 139, 87, 81, 41, 213, 71, 80, 58, 236, 112, 146, 239, 82, 134, 161, 172, 216, 187, 230, 176, 202, 229, 29, 95, 81, 110, 86, 68, 94, 40, 42, 91, 164, 162, 251, 35, 143, 5, 174, 3, 197, 250, 147, 48, 84, 242, 188, 8, 182, 167, 2, 48, 231, 155, 23, 184, 136, 18, 224, 178, 4, 156, 230, 178, 202, 229, 29, 95, 71, 74, 166, 184, 212, 107, 223, 204, 156, 55, 210, 107, 47, 34, 47, 20, 233, 91, 136, 0, 192, 108, 11, 220, 246, 76, 135, 172, 122, 245, 121, 103, 105, 123, 243, 48, 203, 102, 244, 3, 139, 89, 229, 170, 73, 8, 89, 227, 203, 203, 45, 138, 200, 11, 213, 212, 148, 98, 4, 48, 140, 10, 117, 118, 15, 246, 163, 74, 158, 186, 131, 109, 71, 73, 209, 73, 152, 22, 0, 81, 237, 89, 154, 119, 204, 75, 10, 243, 114, 139, 34, 218, 69, 53, 53, 37, 144, 81, 64, 200, 24, 148, 186, 80, 71, 66, 233, 98, 237, 17, 21, 51, 154, 7, 224, 35, 243, 127, 43, 200, 84, 59, 13, 225, 42, 87, 46, 184, 89, 191, 69, 118, 236, 74, 131, 188, 99, 94, 82, 48, 23, 18, 208, 142, 133, 92, 224, 51, 33, 127, 189, 15, 214, 218, 232, 91, 8, 27, 32, 11, 229, 119, 101, 246, 205, 5, 149, 104, 1, 251, 0, 184, 27, 192, 159, 18, 142, 247, 129, 34, 100, 151, 135, 164, 212, 251, 17, 125, 252, 237, 160, 28, 192, 150, 0, 115, 161, 130, 141, 161, 143, 15, 20, 211, 46, 170, 174, 41, 85, 66, 0, 211, 0, 60, 134, 228, 242, 107, 13, 80, 102, 239, 81, 94, 123, 127, 0, 247, 64, 182, 241, 58, 72, 253, 156, 4, 85, 69, 57, 2, 114, 152, 13, 135, 162, 122, 158, 135, 34, 133, 202, 233, 155, 15, 204, 90, 144, 215, 88, 83, 20, 239, 35, 249, 158, 183, 38, 143, 163, 132, 163, 174, 21, 174, 177, 181, 26, 243, 210, 44, 47, 20, 237, 155, 137, 181, 118, 7, 79, 132, 168, 244, 23, 78, 219, 62, 16, 215, 152, 93, 227, 123, 255, 95, 2, 43, 47, 116, 129, 140, 72, 93, 161, 26, 204, 159, 85, 216, 55, 19, 44, 1, 124, 139, 120, 181, 202, 70, 84, 39, 38, 238, 110, 104, 96, 7, 153, 223, 27, 66, 145, 171, 147, 18, 207, 200, 15, 181, 26, 243, 146, 132, 44, 121, 161, 220, 190, 137, 96, 9, 224, 37, 40, 237, 104, 79, 40, 98, 247, 111, 40, 117, 145, 150, 3, 63, 0, 184, 22, 192, 206, 16, 165, 238, 11, 105, 17, 15, 84, 225, 218, 181, 26, 115, 203, 2, 179, 22, 116, 164, 10, 67, 88, 152, 66, 149, 80, 173, 198, 122, 218, 151, 10, 184, 60, 146, 228, 103, 36, 207, 174, 210, 186, 89, 203, 49, 183, 24, 244, 243, 2, 150, 135, 164, 247, 207, 171, 76, 103, 247, 67, 14, 142, 229, 160, 77, 14, 222, 172, 226, 181, 107, 53, 230, 22, 1, 62, 1, 212, 10, 118, 133, 34, 103, 30, 69, 145, 152, 245, 58, 212, 28, 154, 43, 40, 180, 155, 249, 123, 97, 51, 221, 175, 14, 57, 161, 57, 56, 192, 16, 104, 9, 120, 6, 213, 139, 29, 168, 67, 149, 160, 150, 28, 96, 52, 100, 255, 127, 26, 218, 37, 227, 87, 53, 188, 87, 29, 202, 132, 162, 155, 71, 23, 129, 167, 17, 237, 125, 243, 8, 148, 0, 89, 135, 165, 12, 154, 75, 8, 172, 195, 82, 10, 75, 75, 141, 160, 58, 44, 33, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 168, 19, 64, 11, 135, 58, 1, 180, 112, 248, 127, 205, 22, 228, 174, 232, 152, 0, 0, 0, 2, 73, 68, 65, 84, 220, 58, 151, 122, 238, 27, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130};
	m_DefaultFont.m_FontHeader->textureptr[0] = (drgUInt64)drgTexture::LoadFromMem(tex_fnt_default, 16467, "fnt_default");
	m_FontHeaderCount++;
}

void drgFont::CleanUpFontHeaders() // called when the app ends
{
	for (int i = 0; i < DRG_FONT_MAX; ++i)
	{
		if (m_FontHeaderList[i].header != NULL)
			drgMemFree(m_FontHeaderList[i].header);
	}
}

void drgFont::LoadRaw(char *rawfile, int total)
{
	char tempTEX[DRG_MAX_PATH];

	// drgTexture* fnt_tex = drgTexture::LoadFromFile(rawfile);

	unsigned int pitch = 0;
	int width = 1024;
	int height = 1024;

	for (int count = 0; count < 10; ++count)
		m_FontHeader->textureptr[count] = NULL;

	while (total >= 0)
	{
		drgString::PrintFormated(tempTEX, "%s%c.tga", rawfile, '0' + total);
		drgTexture *fnt_tex = drgTexture::LoadFromFile(tempTEX);
		m_FontHeader->textureptr[total] = (drgUInt64)fnt_tex;
		total--;
	}
}

int drgFont::LoadInternal(int index, unsigned int headersize, const char *fontname)
{
	m_FontHeaderRec = &m_FontHeaderList[index];
	m_FontHeader->m_Flags |= FONT_IS_INITED;

	// Stow it in the cache
	m_FontHeaderRec->header = (char *)m_FontHeader;
	m_FontHeaderRec->ref_count++;
	drgString::Copy(m_FontHeaderRec->fontname, fontname);

#ifdef DRG_IS_BIG_ENDIAN
	drgFlipEndian16(&(m_FontHeader->nmChar));
	drgFlipEndian16(&(m_FontHeader->spaceWidth));
	drgFlipEndian16(&(m_FontHeader->m_Flags));
	drgFlipEndian16(&(m_FontHeader->m_MaxChars));
	drgFlipEndian32(&(m_FontHeader->nmKerning));
	drgFlipEndian64(&(m_FontHeader->charptr));
	drgFlipEndian64(&(m_FontHeader->kernptr));
#endif

	m_FontHeader->charptr = ConvertUI64(&m_FontHeader->charptr);
	m_FontHeader->kernptr = ConvertUI64(&m_FontHeader->kernptr);

	m_FontHeader->charptr = ((drgUInt64)m_FontHeader->charptr + (drgUInt64)m_FontHeader);
	m_FontHeader->kernptr = ((drgUInt64)m_FontHeader->kernptr + (drgUInt64)m_FontHeader);

	int curchar;
	_chars *curcharptr;
	_chars *charptr = ((_chars *)m_FontHeader->charptr);

#ifdef DRG_IS_BIG_ENDIAN
	_kern *kernptr = ((_kern *)m_FontHeader->kernptr);
	for (curchar = 0; curchar < m_FontHeader->nmChar; curchar++)
	{
		curcharptr = &charptr[curchar];
		drgFlipEndian16(&(curcharptr->unicode));
		drgFlipEndian16(&(curcharptr->u1));
		drgFlipEndian16(&(curcharptr->u2));
		drgFlipEndian16(&(curcharptr->v1));
		drgFlipEndian16(&(curcharptr->v2));
		drgFlipEndian16(&(curcharptr->firstKern));
	}
	for (curchar = 0; curchar < m_FontHeader->nmKerning; curchar++)
	{
		drgFlipEndian16(&(kernptr[curchar].code1));
		drgFlipEndian16(&(kernptr[curchar].code2));
		drgFlipEndian16(&(kernptr[curchar].spacing));
	}
	for (curchar = 0; curchar < m_FontHeader->m_MaxChars; curchar++)
		drgFlipEndian16(&(m_FontHeader->asciiMap[curchar]));
#endif

	int test = sizeof(_chars);
	int maxtexidx = 0;
	m_FontSize = 0;
	for (curchar = 0; curchar < m_FontHeader->nmChar; curchar++)
	{
		curcharptr = &charptr[curchar];
		maxtexidx = DRG_MAX(maxtexidx, curcharptr->texindex);
		m_FontSize = DRG_MAX(m_FontSize, (((curcharptr->v2) - curcharptr->v1)));
	}
	return maxtexidx;
}
//! Function that loads and initializes a font from a FontBuilder2 font file (there must be a .tga file in the same directory named "<filename>0.tga" )
//!  \param filename fully qualified filename of the font file, with or without the ".ftn" extension
//!  \param fontname an identifying name for the font
bool drgFont::Init(const char *filename, const char *fontname)
{
	int i;
	if (m_FontHeaderCount == 0)
	{
		for (i = 0; (i < DRG_FONT_MAX); ++i)
		{
			m_FontHeaderList[i].header = NULL;
			m_FontHeaderList[i].ref_count = 0;
		}
	}

	CleanUp();

	bool foundHeader = false;
	for (i = 0; (i < DRG_FONT_MAX) && (!foundHeader); ++i)
	{
		if ((m_FontHeaderList[i].header != NULL) && (!drgString::Compare(fontname, m_FontHeaderList[i].fontname)))
		{
			m_FontHeaderRec = &m_FontHeaderList[i];
			m_FontHeaderRec->ref_count++;
			m_FontHeader = (FontHeader *)m_FontHeaderRec->header;
			foundHeader = true;
		}
	}

	if (!foundHeader)
	{
		char tempFNT[DRG_MAX_PATH];
		char tempTEX[DRG_MAX_PATH];

		drgString::Copy(tempFNT, filename);
		if (!drgString::CompareNoCase(&tempFNT[drgString::Length(tempFNT) - 4], ".fnt"))
			tempFNT[drgString::Length(tempFNT) - 4] = '\0';
		drgString::Copy(tempTEX, tempFNT);
		drgString::Concatenate(tempFNT, ".fnt");
		// drgString::Concatenate( tempTEX, "0.tga" );

		int index = -1;
		for (i = 0; (i < DRG_FONT_MAX); ++i)
		{
			if (m_FontHeaderList[i].header == NULL)
			{
				foundHeader = true;
				index = i;
				break;
			}
		}
		if (!foundHeader)
		{
			drgDebug::Notify("No space for Font %s!", filename);
			return false;
		}

		unsigned int headersize = 0;
		m_FontHeader = (FontHeader *)drgFile::MallocFile(tempFNT, &headersize);
		if (!m_FontHeader)
			return false;

		int maxtexidx = LoadInternal(index, headersize, fontname);

		if (maxtexidx > 2)
			drgPrintError("please keep texture count for font under 2!");
		if (maxtexidx > 8)
			maxtexidx = 8;

		LoadRaw(tempTEX, maxtexidx);

		m_FontHeaderCount++;
		return true;
	}
	return false;
}

//! Function to cleanup and delete a font
void drgFont::CleanUp()
{
	if (this == (&m_DefaultFont))
		return;
	if (m_FontHeaderRec != NULL)
	{
		m_FontHeaderRec->ref_count--;
		if (m_FontHeaderRec->ref_count <= 0)
		{
			if (m_FontHeaderRec->header != NULL)
				drgMemFree(m_FontHeaderRec->header);
			m_FontHeaderRec->header = NULL;
			m_FontHeaderRec->fontname[0] = '\0';
		}
	}

	m_FontHeader = NULL;
	m_FontSize = 0;
	m_SpaceWidth = 0;
}

void drgFont::CopyFont(drgFont *font)
{
	if (!font->m_FontHeader)
		return;

	Init(NULL, font->GetFontName());
	m_FontSize = font->m_FontSize;
}

int drgFont::GetTextureCount()
{
	if (m_FontHeader == NULL)
		return 0;

	for (int count = 0; count < 10; ++count)
	{
		if (m_FontHeader->textureptr[count] == NULL)
			return count;
	}
	return 10;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//						Rendering Functions
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

#define USE_TRI_STRIPS 0
#define MAX_PRINTABLE_CHARS_PER_STRING 128

//! Function to print a certain number of character of a string at (x,y)
//!  \param color desired color of message
//!  \param x x location to start printing
//!  \param y y location to start printing
//!  \param string string to output
//!  \param count number of characters to output
//!  \returns x last x location written to
int drgFont::Print(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, char *string, float scale, int count)
{
	if (!m_FontHeader)
		return 0;

	if (!count)
		return 0;

	assert(m_FontHeader->textureptr[0]);

	//
	//	int screenWidth = drgApp::getInstance()->m_ScreenWidth[currentScreen];
	//    int screenHeight = drgApp::getInstance()->m_ScreenHeight[currentScreen];
	//    if( (x > screenWidth) || (y  > screenHeight)) return x;
	//
	//	VertexSetRecord vsRec;
	// #if USE_TRI_STRIPS
	//	SimpleVertex vertBuff[4];
	//	vsRec.length = 4;
	//	vsRec.type = VertexSetRecord::TRISTRIP;
	// #else
	//	SimpleVertex vertBuff[(6 * MAX_PRINTABLE_CHARS_PER_STRING)];  // up to 512 characters
	//	int chars = 0;
	//	vsRec.type = VertexSetRecord::TRILIST;
	// #endif
	//	vsRec.texture = (drgTexture*)m_FontHeader->textureptr[0];
	//
	//	float texWidth=((float)vsRec.texture->GetWidth())/DRG_SCALE_UV_AMOUNT;
	//	float texHeight=((float)vsRec.texture->GetHeight())/DRG_SCALE_UV_AMOUNT;
	//
	//	_chars* charptr=((_chars*)m_FontHeader->charptr);
	//	_kern* kernptr=((_kern*)m_FontHeader->kernptr);
	//
	//	float yoffset = 0.0f;
	//	unsigned int colorint;
	//	color.Get8888(&colorint);
	//
	//	int lastChar=-1;
	//	while(*string)
	//	{
	//		int ch=m_FontHeader->asciiMap[*(unsigned char *)string];
	//		if(ch<=0)
	//		{// space or unknown
	//			x+=(int)((charptr[0].advance+1)*m_Scale);
	//        }
	//		else
	//		{
	//			if(charptr[ch].firstKern*m_Scale>=0)
	//			{
	//				for(int krn=charptr[ch].firstKern; kernptr[krn].code2==ch;++krn)
	//				{
	//					if (kernptr[krn].code1==lastChar)
	//					{
	//						x+=(int)(kernptr[krn].spacing*m_Scale);
	//						break;
	//					}
	//				}
	//            }
	//
	//			drgVec2 MinUV( ((float)charptr[ch].u1)/texWidth, ((float)charptr[ch].v1)/texHeight );
	//			drgVec2 MaxUV( ((float)(charptr[ch].u2+1))/texWidth, ((float)charptr[ch].v2)/texHeight );
	//
	//			float ystart = y + (m_FontSize * m_Scale); // - (m_FontSize/8);
	//
	//            if( ystart > screenHeight)
	//				break;
	//
	//            if( ((ystart + m_FontSize) > 0) &&
	//                (x < screenWidth) &&
	//                (x + (int)(charptr[ch].advance*m_Scale+1) > 0))  // Only append to the vertex buffer if the character is in view space.
	//            {
	//			    drgVec2 homMin,homMax;
	//				yoffset = ((float)charptr[ch].yoff) * m_Scale;
	//			    homMin.x = (((x+charptr[ch].xoff)*2.0f)/((float)screenWidth))-1.0f;
	//			    homMin.y =-((((ystart-yoffset)*2.0f)/((float)SCREEN1_HEIGHT))-1.0f);
	//
	//			    homMax.x = ((((x+charptr[ch].xoff)+(((charptr[ch].u2+1)-(charptr[ch].u1)) * m_Scale))*2.0f)/((float)screenWidth))-1.0f;
	//			    homMax.y =-(((((ystart-yoffset)+((charptr[ch].v2-charptr[ch].v1) * m_Scale))*2.0f)/((float)SCREEN1_HEIGHT))-1.0f);
	// #if USE_TRI_STRIPS
	//			    vertBuff[0].x = homMin.x; vertBuff[0].y = homMax.y; vertBuff[0].z = 0.5f; vertBuff[0].u = MinUV.x; vertBuff[0].v = MaxUV.y;
	//			    vertBuff[1].x = homMax.x; vertBuff[1].y = homMax.y; vertBuff[1].z = 0.5f; vertBuff[1].u = MaxUV.x; vertBuff[1].v = MaxUV.y;
	//			    vertBuff[2].x = homMin.x; vertBuff[2].y = homMin.y; vertBuff[2].z = 0.5f; vertBuff[2].u = MinUV.x; vertBuff[2].v = MinUV.y;
	//			    vertBuff[3].x = homMax.x; vertBuff[3].y = homMin.y; vertBuff[3].z = 0.5f; vertBuff[3].u = MaxUV.x; vertBuff[3].v = MinUV.y;
	//			    SimpleVertexDRG* sdrgv = (SimpleVertexDRG*) vertBuff;
	// #else
	//				int voffset = chars * 6;
	//			    SimpleVertexDRG* sdrgv = (SimpleVertexDRG*) &(vertBuff[voffset]);
	//			    vertBuff[voffset].x = homMin.x; vertBuff[voffset].y = homMax.y; vertBuff[voffset].z = 0.5f; vertBuff[voffset].u = MinUV.x; vertBuff[voffset].v = MaxUV.y; voffset++;
	//			    vertBuff[voffset].x = homMax.x; vertBuff[voffset].y = homMax.y; vertBuff[voffset].z = 0.5f; vertBuff[voffset].u = MaxUV.x; vertBuff[voffset].v = MaxUV.y; voffset++;
	//			    vertBuff[voffset].x = homMin.x; vertBuff[voffset].y = homMin.y; vertBuff[voffset].z = 0.5f; vertBuff[voffset].u = MinUV.x; vertBuff[voffset].v = MinUV.y; voffset++;
	//			    vertBuff[voffset].x = homMin.x; vertBuff[voffset].y = homMin.y; vertBuff[voffset].z = 0.5f; vertBuff[voffset].u = MinUV.x; vertBuff[voffset].v = MinUV.y; voffset++;
	//			    vertBuff[voffset].x = homMax.x; vertBuff[voffset].y = homMax.y; vertBuff[voffset].z = 0.5f; vertBuff[voffset].u = MaxUV.x; vertBuff[voffset].v = MaxUV.y; voffset++;
	//			    vertBuff[voffset].x = homMax.x; vertBuff[voffset].y = homMin.y; vertBuff[voffset].z = 0.5f; vertBuff[voffset].u = MaxUV.x; vertBuff[voffset].v = MinUV.y;
	//				chars++;
	// #endif
	//			    sdrgv[0].color = colorint;
	//			    sdrgv[1].color = colorint;
	//			    sdrgv[2].color = colorint;
	//			    sdrgv[3].color = colorint;
	// #if USE_TRI_STRIPS
	//			    AppendToCurrentVertexManagerBuffer(&vsRec, vertBuff);
	// #else
	//			    sdrgv[4].color = colorint;
	//			    sdrgv[5].color = colorint;
	//				if( MAX_PRINTABLE_CHARS_PER_STRING <= chars) break;
	// #endif
	//            }
	//			x+=(int)((charptr[ch].advance+1)*m_Scale);
	//		}
	//
	//		lastChar=ch;
	//		++string;
	//		if(!--count)
	//			break;
	//	}
	// #if !USE_TRI_STRIPS
	//	vsRec.length = chars * 6;
	//	AppendToCurrentVertexManagerBuffer(&vsRec, vertBuff);
	// #endif
	return x;
}

//! Function to print a string of characters, with formating, at (x,y)
//!  \param color desired color of string
//!  \param x x location to start printing
//!  \param y y location to start printing
//!  \param fmt format of output string
//!  \param ... list of arguments
void drgFont::Printf(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, float scale, char *fmt, ...)
{
	va_list argptr;
	char text[1024];

	va_start(argptr, fmt);
	vsprintf(text, fmt, argptr);
	va_end(argptr);

	Print(draw, color, x, y, text, scale);
}

//! Function that will print the given string, centered at (x,y).
//!  \param color desired output string color
//!  \param x x location of center of string
//!  \param y y location of center of string
//!  \param string string to print
//!  \param count number of characters to output
int drgFont::PrintCentered(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, char *string, float scale, int count)
{
	x -= (StringSize(string, scale, count) / 2);
	return Print(draw, color, x, y, string, scale, count);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//						Wrapping Functions
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

//! Function that will print the provided string while word wrapping when necessary.
//!  \param color desired output string color
//!  \param x x location to start printing
//!  \param y y location to start printing
//!  \param string string to print
//!  \param width maximum width to print
//!  \param clipLow lower clipping bounds
//!  \param clipHigh upper clipping bounds
//!  \param lineWidth maximum line width
int drgFont::PrintWrap(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, char *string, int width, float scale, int alignment, int clipLow, int clipHigh, int lineWidth)
{
	// int currline = 0;
	// int lastlinechars = 0;
	// if( !m_LineBreaks[0])
	//	return 0;

	// char* pp = m_StringStartC;
	// y -= (int)((float)GetFontHeight() * 0.1f);		// remove spacing from first line of characters
	// while(*pp)
	//{
	//	int whitespace = 0;
	//	for(;*pp && (isWhitespace(*pp) || isNewline(*pp));pp++, whitespace++);		// skip whitespace
	//	int currx = 0;
	//	int curlinesize = (m_LineBreaks[currline] - lastlinechars) - whitespace;
	//	if(curlinesize>0)
	//	{
	//		switch(alignment)
	//		{
	//		case 0:
	//			{
	//				currx = Print(color, x, y, pp, curlinesize);
	//			}
	//			break;
	//		case 1:
	//			{
	//				int lineend = m_LineBreaks[currline];
	//				for(;isWhitespace(pp[lineend-1]) || isNewline(pp[lineend-1]);lineend--);
	//				int strsize = StringSize(pp,(lineend - lastlinechars) - whitespace);
	//				if( m_LineBreaks[currline] == m_EllipsePos)
	//					strsize += m_EllipseWidth;
	//				currx = Print(color, ((width - strsize) / 2) + x, y, pp, curlinesize);
	//			}
	//			break;
	//		case 2:
	//			{
	//				int lineend = m_LineBreaks[currline];
	//				for(;isWhitespace(pp[lineend-1]) || isNewline(pp[lineend-1]);lineend--);
	//				int strsize = StringSize(pp,(lineend - lastlinechars) - whitespace);
	//				//int strsize = StringSize(pp,curlinesize);
	//				if( m_LineBreaks[currline] == m_EllipsePos)
	//					strsize += m_EllipseWidth;
	//				currx = Print(color, x + width - strsize, y, pp, curlinesize);
	//			}
	//			break;
	//		}
	//	}
	//	lastlinechars = m_LineBreaks[currline];

	//	if( m_LineBreaks[currline] == m_EllipsePos)
	//	{
	//		Print(color, currx, y, "...", 3);
	//		break;
	//	}
	//	y+= GetFontHeight() + GetFontLineSpacing();
	//	pp = m_StringStartC + m_LineBreaks[currline];
	//	currline++;
	//	if( (!m_LineBreaks[currline]) ||
	//		(currline >= MAX_LINE_BREAKS)) break;
	//}
	// return m_LongestLine;
	return 0;
}

int drgFont::PrintWrapAlignment(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, char *string, int width, int height, float scale, int clipLow, int clipHigh, int lineWidth, int alignmentV, int alignmentH)
{
	//	if( !recalculateIfNecessary(string, width, height)) return 0;
	return (PrintWrap(draw, color, x, y, string, width, scale, alignmentH));
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//						Sizing Functions
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

//! Function that returns the physical size of the input string.
//!  \param string input string
//!  \param count number of characters to include in the output size
int drgFont::StringSize(char *string, float scale, int count)
{
	if (!m_FontHeader)
		return 0;

	int lastChar = -1;
	int x = 0;

	if (!count)
		return 0;

	_chars *charptr = ((_chars *)m_FontHeader->charptr);
	_kern *kernptr = ((_kern *)m_FontHeader->kernptr);
	while (*string)
	{
		int ch = m_FontHeader->asciiMap[*(unsigned char *)string];

		if (ch <= 0)
		{ // space or unknown
			x += (int)((charptr[0].advance + 1) * scale);
		}
		else
		{
			if (charptr[ch].firstKern * scale >= 0)
			{
				for (int krn = charptr[ch].firstKern; kernptr[krn].code2 == ch; ++krn)
				{
					if (kernptr[krn].code1 == lastChar)
					{
						x += (int)(kernptr[krn].spacing * scale);
						break;
					}
				}
			}
			x += (int)((charptr[ch].advance + 1) * scale);
		}
		lastChar = ch;
		++string;
		--count;
		if (!count)
			break;
	}
	return x;
}

bool drgFont::CalculateDimensions(char *string, int width, int height)
{
	//	ResetDimensions();
	//	memset(m_LineBreaks, 0, sizeof(int) * MAX_LINE_BREAKS);
	//
	//	m_DimensionStringC = string;
	//	m_StringStartC = string;
	//	m_StringLen = drgString::Length(string);
	//	if( m_StringLen <= 0)
	//		return false;
	//
	//
	//	// first eradicate extra whitespace
	//	char*	pp = ((m_StringStartC + m_StringLen) - 1);
	//	while( isWhitespace(*pp))
	//	{
	//		m_StringLen--;
	//		if( m_StringLen <= 0)
	//			return false;
	//		pp = ((m_StringStartC + m_StringLen) - 1);
	//	}
	//	pp = m_StringStartC;
	//	while( isWhitespace(*pp))
	//	{
	//		m_StringStartC++;
	//		if( m_StringStartC >= (m_DimensionStringC + m_StringLen))
	//			return false;
	//		pp = m_StringStartC;
	//	}
	//	m_StringLen -= (m_StringStartC - m_DimensionStringC); // if the head moved, the total length is shorter
	//
	//
	//	m_SpaceWidth = StringSize(" ",1);
	//	m_EllipseWidth = StringSize("...",3);
	//	if( width < m_EllipseWidth)
	//		return false;			// we can't even print our ellipses...
	//	int lineLen = 0;
	//	int numlines = 0;
	//	int fixedFontHeight = GetFontHeight();
	//	int fixedFontLineSpace = GetFontLineSpacing();
	//	char* linestart = pp;
	//
	//	m_NumOfLines = 0;
	//	// second find our breaks and ellipse location
	//	while (*pp)
	//	{// bound next word
	//		char *w;
	//
	//		int whitechars = 0;
	//		for(w=pp;*w && isWhitespace(*w);w++, whitechars++);		// skip whitespace
	//		if( !*w) break;											// we hit the end of the string while looking for more content
	//		pp=w;
	//		for(;*w && (!isWhitespace(*w)) && !(isNewline(*w));w++);		// collect the next word
	//
	//		// see if adding that word to the line will cause an overflow
	//		int wordLen=StringSize(pp,(int)(w-pp));
	//
	//		bool newline = (*w && isNewline(*w));
	//		bool newlineinserted = false;
	//
	//		//bool atend = !(*w && (w < m_StringStart + m_StringLen));						// there's more to go and we're not at the end yet
	//		if (lineLen + (m_SpaceWidth * whitechars) + wordLen>=width)		// can we fit the leading spaces & the word?
	//		{
	//			m_LineBreaks[m_NumOfLines] = ((pp - whitechars) - m_StringStartC);
	//			if ( (((fixedFontHeight * (m_NumOfLines + 2)) + (fixedFontLineSpace * (m_NumOfLines + 1))) > height) ||		// can't fit another line
	//				 ((m_NumOfLines + 1) >= MAX_LINE_BREAKS))
	//			{
	//				char* endofline  = pp - whitechars;
	//				int linechars = (endofline - linestart);		// number of characters in this line
	//				while((lineLen + m_EllipseWidth > width) && (linechars > 0))
	//				{
	//					for(;(linechars > 0) && isWhitespace(*endofline); linechars--, endofline--);		// remove whitespace
	//
	//					for(;(linechars > 0) && (!isWhitespace(*endofline)) && (!isNewline(*endofline)); linechars--, endofline--);		// walk backwards until we've consumed the line
	//																										// or find whitespace
	//					lineLen = StringSize(linestart,linechars);
	//				}
	//				m_EllipsePos = (endofline - m_StringStartC);
	//				m_LineBreaks[m_NumOfLines] = m_EllipsePos;
	//				m_LongestLine = DRG_MAX( m_LongestLine, lineLen + m_EllipseWidth);
	//				m_NumOfLines++;
	//				lineLen=0;
	//				break;
	//			}
	//			linestart = pp;
	//			m_LongestLine = DRG_MAX( m_LongestLine, lineLen);
	//			m_NumOfLines++;
	//			lineLen=0;
	//			newlineinserted = true;
	//		}
	//		else if(whitechars > 0)					// we can fit them, so add the whitespace to our measurement
	//		{
	//			lineLen += (m_SpaceWidth * whitechars);
	//		}
	//
	//		if( newline)
	//		{
	//			w++;
	//			if( !newlineinserted)  // We didn't start a new line, but we need to
	//			{
	//				lineLen += wordLen;
	//				m_LineBreaks[m_NumOfLines] = w - m_StringStartC;
	//				m_LongestLine = DRG_MAX( m_LongestLine, lineLen);
	//				m_NumOfLines++;
	//				lineLen=0;
	//				linestart = w;
	//				newlineinserted = true;
	//				if ( (((fixedFontHeight * (m_NumOfLines + 1)) + (fixedFontLineSpace * (m_NumOfLines))) > height) ||		// can't fit another line
	//					 ((m_NumOfLines + 1) >= MAX_LINE_BREAKS))
	//					 break;
	//			}
	//		}
	//		else
	//			lineLen += wordLen;
	//
	//		pp=w;
	//	}
	//	if(lineLen > 0)								// there was data left over
	//	{
	//		m_LongestLine = DRG_MAX( m_LongestLine, lineLen);
	//		m_LineBreaks[m_NumOfLines] = m_StringLen;
	//		m_NumOfLines++;
	//	}
	//
	//	// Lastly, if it's a single line, calc the tallest character
	// #if 0		// doesn't work with the font info we have at hand
	//	if( m_NumOfLines == 1)
	//	{
	//		_chars* charptr=((_chars*)m_FontHeader->charptr);
	//		_kern* kernptr=((_kern*)m_FontHeader->kernptr);
	//
	//		int numchars = ((m_EllipsePos > 0) ? m_EllipsePos : m_StringLen);
	//		for( char* str = m_StringStart; str < (m_StringStart + numchars);str++)
	//		{
	//			unsigned char * uchr = (unsigned char *)str;
	//			int ch = m_FontHeader->asciiMap[*uchr];
	//			if(ch > 0)
	//			{
	//
	//				if( *uchr == 'g' || *uchr == 'j' || *uchr == 'p' ||
	//					*uchr == 'q' || *uchr == 'y' || *uchr == 'g'|| *uchr == 'g')
	//				{
	//	   				m_TallestCharacter=DRG_MAX( m_TallestCharacter, (
	//						((charptr[ch].yoffset) + ((charptr[ch].v2) - (charptr[ch].v1)))-2 ) );
	//
	//				}
	//				else
	//				{
	//					m_TallestCharacter=DRG_MAX( m_TallestCharacter, (
	//						((charptr[ch].yoffset) +((charptr[ch].v2) - (charptr[ch].v1)))-4));
	//				}
	//			}
	//		}
	//		if( m_TallestCharacter > 0)
	//			m_TallestCharacter *= m_Scale;
	//	}
	// #endif
	//	if( m_NumOfLines > 0)
	//		m_TextHeight = (fixedFontHeight * m_NumOfLines) + (fixedFontLineSpace * (m_NumOfLines-1));

	return true;
}

int drgFont::GetTextWidth(char *string, int width, int height)
{
	// if( !recalculateIfNecessary(string, width, height)) return 0;
	// if( m_NumOfLines > 1) return width;
	// return m_LongestLine;
	return 0;
}

int drgFont::GetTextHeight(char *string, int width, int height)
{
	// if( !recalculateIfNecessary(string, width, height)) return 0;
	// if( m_NumOfLines < 0) return 0;
	// return m_TextHeight;//((m_NumOfLines == 1) ? m_TallestCharacter : m_TextHeight);
	return 0;
}

int drgFont::GetNumLines(char *string, int width, int height)
{
	// if( !recalculateIfNecessary(string, width, height)) return 0;
	// return ((m_NumOfLines < 0) ? 0 : m_NumOfLines);
	return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//						Unicode Functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////
int drgFont::Print(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, const unsigned short *string, float scale, int count)
{
	if (!m_FontHeader)
		return 0;

	if (!count)
		return 0;

	assert(m_FontHeader->textureptr[0]);

	int screenWidth = (int)draw->GetDrawContext()->GetDrawWidth();
	int screenHeight = (int)draw->GetDrawContext()->GetDrawHeight();
	if ((x > screenWidth) || (y > screenHeight))
		return x;

	drgTexture *texture = (drgTexture *)m_FontHeader->textureptr[0];
	// draw->GetRenderContext()->StartDraw(DRG_MATERIAL_DEFAULT, texture);

	int curtexidx = -1;
	float texWidth = 0;
	float texHeight = 0;

	_chars *charptr = ((_chars *)m_FontHeader->charptr);
	_kern *kernptr = ((_kern *)m_FontHeader->kernptr);

	int num_chars[2] = {0, 0};
	float xval = (float)x;
	float yval = (float)y;
	float yoffset = 0.0f;
	drgBBox homBBox;
	drgBBox uvBBox;

	int lastChar = -1;
	while (*string)
	{
		int ch = m_FontHeader->asciiMap[*(unsigned short *)string];
		if (ch <= 0)
		{ // space or unknown
			xval += ((charptr[0].advance + 1.0f) * scale);
		}
		else
		{
			if (curtexidx != charptr[ch].texindex)
			{
				// if(charptr[ch].texindex==1)
				//{
				//	curtexidx = 1;
				//	vertBuff = vertBuff2;
				// }
				// else
				//{
				curtexidx = 0;
				//	vertBuff = vertBuff1;
				//}
				texWidth = ((float)texture->GetWidth());
				texHeight = ((float)texture->GetHeight());
			}

			if (charptr[ch].firstKern * scale >= 0)
			{
				for (int krn = charptr[ch].firstKern; kernptr[krn].code2 == ch; ++krn)
				{
					if (kernptr[krn].code1 == lastChar)
					{
						xval += (int)(((float)kernptr[krn].spacing) * scale);
						break;
					}
				}
			}

			uvBBox.minv.Set(((float)charptr[ch].u1) / texWidth, ((float)charptr[ch].v1) / texHeight, 1.0f);
			uvBBox.maxv.Set(((float)(charptr[ch].u2 + 1)) / texWidth, ((float)charptr[ch].v2) / texHeight, 1.0f);

			float ystart = yval + (((float)m_FontSize) * scale); // - (m_FontSize/8);

			if (ystart > screenHeight)
				break;

			if (((ystart + m_FontSize) > 0) && (xval < ((float)screenWidth)) && (xval + (int)(charptr[ch].advance * scale + 1.0f) > 0.0f)) // Only append to the vertex buffer if the character is in view space.
			{
				yoffset = ((float)charptr[ch].yoff) * scale;
				homBBox.minv.x = (xval + (((float)charptr[ch].xoff) * scale));
				homBBox.minv.y = (ystart - yoffset);
				homBBox.minv.z = 0.5f;

				homBBox.maxv.x = ((xval + (((float)charptr[ch].xoff) * scale)) + (((charptr[ch].u2 + 1) - (charptr[ch].u1)) * scale));
				homBBox.maxv.y = ((ystart - yoffset) + ((charptr[ch].v2 - charptr[ch].v1) * scale));
				homBBox.maxv.z = 0.5f;

				// draw->GetRenderContext()->AddRect(&homBBox, &uvBBox, &color);
				draw->DrawRect(&homBBox, &uvBBox, &color, texture);

				num_chars[curtexidx]++;
				if (MAX_PRINTABLE_CHARS_PER_STRING <= num_chars[curtexidx])
					break;
			}
			xval += ((((float)charptr[ch].advance) + 1.0f) * scale);
		}

		lastChar = ch;
		++string;
		if (!--count)
			break;
	}

	// draw->GetRenderContext()->EndDraw();
	return (int)xval;
}

int drgFont::PrintCentered(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, const unsigned short *string, float scale, int count)
{
	x -= (StringSize(string, scale, count) / 2);
	return Print(draw, color, x, y, string, scale, count);
}

int drgFont::PrintRight(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, const unsigned short *string, float scale, int count)
{
	x -= (StringSize(string, scale, count));
	return Print(draw, color, x, y, string, scale, count);
}

int drgFont::PrintWrap(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, unsigned short *string, int width, float scale, int alignment, int clipLow, int clipHigh, int lineWidth)
{
	// int currline = 0;
	// int lastlinechars = 0;
	// if( !m_LineBreaks[0])
	//	return 0;

	// unsigned short* pp = m_StringStartS;
	// y -= (int)((float)GetFontHeight() * 0.1f);		// remove spacing from first line of characters
	// while(*pp)
	//{
	//	int whitespace = 0;
	//	for(;*pp && (isWhitespace(*pp) || isNewline(*pp));pp++, whitespace++);		// skip whitespace
	//	int currx = 0;
	//	int curlinesize = (m_LineBreaks[currline] - lastlinechars) - whitespace;
	//	if(curlinesize>0)
	//	{
	//		switch(alignment)
	//		{
	//		case 0:
	//			{
	//				currx = Print(color, x, y, pp, curlinesize);
	//			}
	//			break;
	//		case 1:
	//			{
	//				int lineend = m_LineBreaks[currline];
	//				for(;isWhitespace(pp[lineend-1]) || isNewline(pp[lineend-1]);lineend--);
	//				int strsize = StringSize(pp,(lineend - lastlinechars) - whitespace);
	//				if( m_LineBreaks[currline] == m_EllipsePos)
	//					strsize += m_EllipseWidth;
	//				currx = Print(color, ((width - strsize) / 2) + x, y, pp, curlinesize);
	//			}
	//			break;
	//		case 2:
	//			{
	//				int lineend = m_LineBreaks[currline];
	//				for(;isWhitespace(pp[lineend-1]) || isNewline(pp[lineend-1]);lineend--);
	//				int strsize = StringSize(pp,(lineend - lastlinechars) - whitespace);
	//				//int strsize = StringSize(pp,curlinesize);
	//				if( m_LineBreaks[currline] == m_EllipsePos)
	//					strsize += m_EllipseWidth;
	//				currx = Print(color, x + width - strsize, y, pp, curlinesize);
	//			}
	//			break;
	//		}
	//	}
	//	lastlinechars = m_LineBreaks[currline];

	//	if( m_LineBreaks[currline] == m_EllipsePos)
	//	{
	//		Print(color, currx/*-((m_FontSize * m_Scale)/2)*/, y, g_EllipseStr, 1);
	//		break;
	//	}
	//	y+= GetFontHeight() + GetFontLineSpacing();
	//	pp = m_StringStartS + m_LineBreaks[currline];
	//	currline++;
	//	if( (!m_LineBreaks[currline]) ||
	//		(currline >= MAX_LINE_BREAKS))
	//		break;
	//}
	// return m_LongestLine;
	return 0;
}

bool drgFont::CalculateDimensions(unsigned short *string, int width, int height)
{
	// ResetDimensions();
	// memset(m_LineBreaks, 0, sizeof(int) * MAX_LINE_BREAKS);

	// m_DimensionStringS = string;
	// m_StringStartS = string;
	// m_StringLen = drgStringUni::Length(string);
	// if( m_StringLen <= 0)
	//	return false;

	//// first eradicate extra whitespace
	// unsigned short*	pp = ((m_StringStartS + m_StringLen) - 1);
	// while( isWhitespace(*pp))
	//{
	//	m_StringLen--;
	//	if( m_StringLen <= 0)
	//		return false;
	//	pp = ((m_StringStartS + m_StringLen) - 1);
	// }
	// pp = m_StringStartS;
	// while( isWhitespace(*pp))
	//{
	//	m_StringStartS++;
	//	if( m_StringStartS >= (m_DimensionStringS + m_StringLen))
	//		return false;
	//	pp = m_StringStartS;
	// }
	// m_StringLen -= (m_StringStartS - m_DimensionStringS); // if the head moved, the total length is shorter

	// m_SpaceWidth = StringSize(" ",1);
	// m_EllipseWidth = StringSize(g_EllipseStr,1);
	// if( width < m_EllipseWidth)
	//	return false;			// we can't even print our ellipses...
	// int lineLen = 0;
	// int numlines = 0;
	// bool canbreakchar = false;
	// bool addedellipse = false;
	// int fixedFontHeight = GetFontHeight();
	// int fixedFontLineSpace = GetFontLineSpacing();
	// unsigned short* linestart = pp;

	// m_NumOfLines = 0;
	//// second find our breaks and ellipse location
	// while (*pp)
	//{// bound next word
	//	unsigned short *w;
	//	int whitechars = 0;
	//	w=pp;
	//	while(*w && isWhitespace(*w))
	//	{ // skip whitespace
	//		w++;
	//		whitechars++;
	//	}
	//	if( !*w)
	//		break;											// we hit the end of the string while looking for more content
	//	pp=w;
	//	canbreakchar = false;
	//	while(*w && (!isWhitespace(*w)) && !(isNewline(*w)) && !(canbreakchar && canUseAsLineBegin(*w)))
	//	{
	//		canbreakchar = canUseAsLineEnd(*w);
	//		w++;		// collect the next word
	//	}

	//	// see if adding that word to the line will cause an overflow
	//	int wordLen=StringSize(pp,(int)(w-pp));

	//	bool newline = (*w && isNewline(*w));
	//	bool newlineinserted = false;

	//	//bool atend = !(*w && (w < m_StringStart + m_StringLen));						// there's more to go and we're not at the end yet
	//	if (lineLen + (m_SpaceWidth * whitechars) + wordLen>=width)		// can we fit the leading spaces & the word?
	//	{
	//		m_LineBreaks[m_NumOfLines] = ((pp - whitechars) - m_StringStartS);
	//		if ( (((fixedFontHeight * (m_NumOfLines + 2)) + (fixedFontLineSpace * (m_NumOfLines + 1))) > height) ||		// can't fit another line
	//			 ((m_NumOfLines + 1) >= MAX_LINE_BREAKS))
	//		{
	//			unsigned short* endofline  = pp - whitechars;
	//			int linechars = (endofline - linestart);		// number of characters in this line
	//			while((lineLen + m_EllipseWidth > width) && (linechars > 0))
	//			{
	//				for(;(linechars > 0) && isWhitespace(*endofline); linechars--, endofline--);		// remove whitespace

	//				for(;(linechars > 0) && (!isWhitespace(*endofline)) && (!isNewline(*endofline)); linechars--, endofline--);		// walk backwards until we've consumed the line
	//																									// or find whitespace
	//				lineLen = StringSize(linestart,linechars);
	//			}
	//			m_EllipsePos = m_LineBreaks[m_NumOfLines];
	//			m_NumOfLines++;
	//			addedellipse = true;
	//			m_LineBreaks[m_NumOfLines] = m_EllipsePos;
	//			m_LongestLine = DRG_MAX( m_LongestLine, lineLen + m_EllipseWidth);
	//			m_NumOfLines++;
	//			lineLen=0;
	//			break;
	//		}
	//		linestart = pp;
	//		m_LongestLine = DRG_MAX( m_LongestLine, lineLen);
	//		m_NumOfLines++;
	//		lineLen=0;
	//		newlineinserted = true;
	//	}
	//	else if(whitechars > 0)					// we can fit them, so add the whitespace to our measurement
	//	{
	//		lineLen += (m_SpaceWidth * whitechars);
	//	}

	//	if( newline)
	//	{
	//		w++;
	//		if( !newlineinserted)  // We didn't start a new line, but we need to
	//		{
	//			lineLen += wordLen;
	//			m_LineBreaks[m_NumOfLines] = w - m_StringStartS;
	//			m_LongestLine = DRG_MAX( m_LongestLine, lineLen);
	//			m_NumOfLines++;
	//			lineLen=0;
	//			linestart = w;
	//			newlineinserted = true;
	//			if ( (((fixedFontHeight * (m_NumOfLines + 1)) + (fixedFontLineSpace * (m_NumOfLines))) > height) ||		// can't fit another line
	//				 ((m_NumOfLines + 1) >= MAX_LINE_BREAKS))
	//				 break;
	//		}
	//	}
	//	else
	//		lineLen += wordLen;

	//	pp=w;
	//}
	// if(lineLen > 0)								// there was data left over
	//{
	//	m_LongestLine = DRG_MAX( m_LongestLine, lineLen);
	//	m_LineBreaks[m_NumOfLines] = m_StringLen;
	//	m_NumOfLines++;
	//}

	// if( m_NumOfLines > 0)
	//	m_TextHeight = (fixedFontHeight * (addedellipse?m_NumOfLines-1:m_NumOfLines)) + (fixedFontLineSpace * (m_NumOfLines-1));

	return true;
}

int drgFont::GetNumMissing(unsigned short *string)
{
	int ch;
	int nummissing = 0;
	while (*string)
	{
		ch = m_FontHeader->asciiMap[*(unsigned short *)string];
		if (ch < 0)
			nummissing++;
		++string;
	}
	return nummissing;
}

int drgFont::PrintWrapAlignment(drgDynamicDrawCommandBuffer *draw, drgColor color, int x, int y, unsigned short *string, int width, int height, float scale, int clipLow, int clipHigh, int lineWidth, int alignmentV, int alignmentH)
{
	// if( !recalculateIfNecessary(string, width, height)) return 0;
	return (PrintWrap(draw, color, x, y, string, width, scale, alignmentH));
}

int drgFont::GetNumLines(unsigned short *string, int width, int height)
{
	// if( !recalculateIfNecessary(string, width, height)) return 0;
	// return ((m_NumOfLines < 0) ? 0 : m_NumOfLines);
	return 0;
}

int drgFont::GetTextWidth(unsigned short *string, int width, int height)
{
	// if( !recalculateIfNecessary(string, width, height)) return 0;
	// if( m_NumOfLines > 1) return width;
	// return m_LongestLine;
	return 0;
}

int drgFont::GetTextHeight(unsigned short *string, int width, int height)
{
	// if( !recalculateIfNecessary(string, width, height)) return 0;
	// if( m_NumOfLines < 0) return 0;
	// return m_TextHeight;//((m_NumOfLines == 1) ? m_TallestCharacter : m_TextHeight);
	return 0;
}

//! Function that returns the physical size of the input string.
//!  \param string input string
//!  \param count number of characters to include in the output size
int drgFont::StringSize(const unsigned short *string, float scale, int count)
{
	if (!m_FontHeader)
		return 0;

	int lastChar = -1;
	float xval = 0.0f;

	if (!count)
		return 0;

	_chars *charptr = ((_chars *)m_FontHeader->charptr);
	_kern *kernptr = ((_kern *)m_FontHeader->kernptr);
	while (*string)
	{
		int ch = m_FontHeader->asciiMap[*(unsigned short *)string];
		if (ch <= 0)
		{ // space or unknown
			xval += ((charptr[0].advance + 1.0f) * scale);
		}
		else
		{
			if (charptr[ch].firstKern * scale >= 0)
			{
				for (int krn = charptr[ch].firstKern; kernptr[krn].code2 == ch; ++krn)
				{
					if (kernptr[krn].code1 == lastChar)
					{
						xval += ((float)kernptr[krn].spacing * scale);
						break;
					}
				}
			}
			xval += ((((float)charptr[ch].advance) + 1.0f) * scale);
		}
		lastChar = ch;
		++string;
		--count;
		if (!count)
			break;
	}
	return (int)xval;
}

bool drgFont::canUseAsLineEnd(unsigned short checkChar)
{
	return !((checkChar < 127) || (checkChar == 65371) || (checkChar == 12308) || (checkChar == 12296) || (checkChar == 12300) || (checkChar == 12302) || (checkChar == 8216) || (checkChar == 8220) || (checkChar == 171) || (checkChar == 65288));
}

bool drgFont::canUseAsLineBegin(unsigned short checkChar)
{
	return !((checkChar == 41) || (checkChar == 93) || (checkChar == 65373) || (checkChar == 12309) || (checkChar == 12297) || (checkChar == 12301) || (checkChar == 12303) || (checkChar == 8217) || (checkChar == 8221) || (checkChar == 187) || (checkChar == 46) || (checkChar == 44) || (checkChar == 63) || (checkChar == 61) || (checkChar == 12290) || (checkChar == 12289) || (checkChar == 65289));
}

drgFontObj::drgFontObj()
{
	m_FileName = "";
}

drgFontObj::~drgFontObj()
{
	if (m_Font != drgFont::GetDefaultFont())
	{
		SAFE_DELETE(m_Font);
	}
}

void drgFontObj::Reinit()
{
}

void drgFontObj::Destroy()
{
}

void drgFontObj::Init(const char *filename)
{
	// Make sure we clean up the old font if necessary
	if (m_Font != drgFont::GetDefaultFont())
	{
		SAFE_DELETE(m_Font);
	}
	m_Font = new drgFont;

	m_FileName = filename;
	drgFilename texfile(filename);
	m_Font->Init(filename, texfile.GetFilename());
}

const char *drgFontObj::GetFileName()
{
	return m_FileName.c_str();
}

drgFont *drgFontObj::GetFont()
{
	return m_Font;
}
